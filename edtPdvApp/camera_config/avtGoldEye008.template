#
# EPICS database for
# Allied Vision Technoligies GoldEye-008CL
#
# GoldEye uses rising edge on trigger, so use normal trigger polarity
#
# Protocol root must match db filename root
# i.e. avtGoldEye008.proto

record( seq, "$(P)$(R)EdtReConfigSeq" )
{
	field( DLY0, "0.0" ) field( DOL0, "1" ) field( LNK0, "$(P)$(R)GoldEyeAccessPrivilege.PROC CA NMS" )
	field( DLY1, "0.1" ) field( DOL1, "1" ) field( LNK1, "$(P)$(R)GoldEyeExposureValue_RBV.PROC CA NMS" )
	field( DLY2, "0.1" ) field( DOL2, "1" ) field( LNK2, "$(P)$(R)GoldEyeAcqStartFullTrMode_RBV.PROC CA NMS" )
	field( DLY3, "0.1" ) field( DOL3, "1" ) field( LNK3, "$(P)$(R)GoldEyeAcqStopFullTrMode_RBV.PROC CA NMS" )
	field( DLY5, "0.1" ) field( DOL5, "0" ) field( LNK0, "$(P)$(R)GoldEyeFStartFullTrMode_RBV.PROC CA NMS" )
	field( DLY6, "0.1" ) field( DOL6, "1" ) field( LNK6, "$(P)$(R)GoldEyeLine1GlitchFilter.PROC CA NMS" )
	field( DLY7, "0.1" ) field( DOL7, "1" ) field( LNK7, "$(P)$(R)GoldEyeFStartTrSrc.PROC CA NMS" )
	field( DLY8, "0.1" ) field( DOL4, "1" ) field( LNK8, "$(P)$(R)GoldEyeHeartbeatTimeout_RBV.PROC CA NMS" )
#   field( TPRO, 1 )
	field( FLNK, "$(P)$(R)EdtReConfigSeq2" )
}
record( seq, "$(P)$(R)EdtReConfigSeq2" )
{

#	field( DLY1, "0.1" ) field( DOL1, "1" ) field( LNK1, "$(P)$(R)Model_RBV.PROC CA NMS" )
#	field( DLY2, "0.1" ) field( DOL2, "1" ) field( LNK2, "$(P)$(R)Manufacturer_RBV.PROC CA NMS" )
#	field( DLY3, "0.1" ) field( DOL3, "1" ) field( LNK3, "$(P)$(R)GoldEyeSerialNumber_RBV.PROC CA NMS" )
#	field( DLY4, "0.1" ) field( DOL4, "1" ) field( LNK4, "$(P)$(R)GoldEyeFirmwareVersion_RBV.PROC CA NMS" )
#	field( DLY5, "0.0" ) field( DOL5, "1" ) field( LNK5, "$(P)$(R)GoldEyeModel_RBV.PROC CA NMS" )
#	field( DLY6, "0.1" ) field( DOL6, "1" ) field( LNK6, "$(P)$(R)GoldEyeTempMainBd_RBV.PROC CA NMS" )
#	field( DLY7, "0.1" ) field( DOL7, "1" ) field( LNK7, "$(P)$(R)GoldEyeTempSensorBd_RBV.PROC CA NMS" )
#	field( DLY8, "0.1" ) field( DOL8, "1" ) field( LNK8, "$(P)$(R)GoldEyeTemperature_RBV.PROC CA NMS" )
#	field( FLNK, "$(P)$(R)EdtReConfigSeq3" )
}

record( stringin, "$(P)$(R)CamModel" )
{
	field( VAL,  "avtGoldEye008" )
	field( PINI, "YES" )
}

record( stringin, "$(P)$(R)CamModelScreen" )
{
	field( VAL,  "edtPdvScreens/avtGoldEye008.edl" )
	field( PINI, "YES" )
}

# Provide defaults for ADCore SizeX and SizeY
record( longout, "$(P)$(R)SizeX" )
{
	field( VAL, "324" )
}
record( longout, "$(P)$(R)SizeY" )
{
	field( VAL, "256" )
}

# Redirect FLNK of EdtBinX to GoldEyeBinX, and
# DOL for EdtBinX_RBV to GoldEyeBinX_RBV
# Ditto for BinY, MinX, MinY, SizeX, and SizeY
record( longin, "$(P)$(R)EdtBinX" )
{
	field( FLNK, "$(P)$(R)GoldEyeBinX" )
}
record( longout, "$(P)$(R)EdtBinX_RBV" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)GoldEyeBinX_RBV NPP MS" )
}
record( longin, "$(P)$(R)EdtBinY" )
{
	field( FLNK, "$(P)$(R)GoldEyeBinY" )
}
record( longout, "$(P)$(R)EdtBinY_RBV" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)GoldEyeBinY_RBV NPP MS" )
}
record( longin, "$(P)$(R)EdtMinX" )
{
	field( FLNK, "$(P)$(R)GoldEyeMinX" )
}
record( longout, "$(P)$(R)EdtMinX_RBV" )
{
	field( DOL,  "$(P)$(R)GoldEyeMinX_RBV NPP MS" )
}
record( longin, "$(P)$(R)EdtMinY" )
{
	field( FLNK, "$(P)$(R)GoldEyeMinY" )
}
record( longout, "$(P)$(R)EdtMinY_RBV" )
{
	field( DOL,  "$(P)$(R)GoldEyeMinY_RBV NPP MS" )
}
record( longin, "$(P)$(R)EdtSizeX" )
{
	field( FLNK, "$(P)$(R)GoldEyeSizeX" )
}
record( longout, "$(P)$(R)EdtSizeX_RBV" )
{
	field( DOL,  "$(P)$(R)GoldEyeSizeX_RBV NPP MS" )
}
record( longin, "$(P)$(R)EdtSizeY" )
{
	field( FLNK, "$(P)$(R)GoldEyeSizeY" )
}
record( longout, "$(P)$(R)EdtSizeY_RBV" )
{
	field( DOL,  "$(P)$(R)GoldEyeSizeY_RBV NPP MS" )
}

#
# AVT GoldEye Register Access PV's
#

# Need to set AccessPrivilege to 1 on startup for R/W control and image streaming
record( longout, "$(P)$(R)GoldEyeAccessPrivilege" )
{
	field( DOL,  "1" )
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x204) $(PORT).SER" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)GoldEyeAccessPrivilege_RBV" )
    field( SDIS, "$(SerialDisable)")
}

# Read at least one register every 3 seconds or camera clears AccessPrivilege
record( longin, "$(P)$(R)GoldEyeAccessPrivilege_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x204) $(PORT).SER" )
    field( SDIS, "$(SerialDisable)")
	field( SCAN, "1 second" )
	field( FLNK, "$(P)$(R)GoldEyeCalcAccessPrivilege" )
}

# Reassert AccessPrivilege if we don't have it
record( calcout, "$(P)$(R)GoldEyeCalcAccessPrivilege" )
{
	field( INPA, "$(P)$(R)GoldEyeAccessPrivilege_RBV NPP NMS" )
	field( CALC, "A!=1" )
	field( OUT,  "$(P)$(R)GoldEyeAccessPrivilege PP MS" )
	field( OOPT, "When Non-zero" )
}

# W/O, write 1 to reset device
record( bo, "$(P)$(R)GoldEyeResetDevice" )
{
	field( DESC, "Reset camera to power up state" )
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0xF318) $(PORT).SER" )
    field( ZNAM, "Reset" )
    field( ONAM, "Resetting!"  )
    field( SDIS, "$(SerialDisable)")
}

# Update fields for ADCore records that we get via GenCP
record( stringin, "$(P)$(R)Manufacturer_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetStr(64,0x4) $(PORT).SER" )
	field( SCAN, "Passive" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
}

# Update fields for ADCore records that we get via GenCP
record( stringin, "$(P)$(R)Model_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetStr(64,0x44) $(PORT).SER" )
	field( SCAN, "Passive" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
}

record( stringin, "$(P)$(R)GoldEyeModel_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetStr(64,0x44) $(PORT).SER" )
	field( SCAN, "Passive" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
}

# Update fields for ADCore records that we get via GenCP
record( stringin, "$(P)$(R)GoldEyeFirmwareVersion_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetStr(64,0xC4) $(PORT).SER" )
	field( SCAN, "Passive" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
}

# Update fields for ADCore records that we get via GenCP
record( stringin, "$(P)$(R)GoldEyeSerialNumber_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetStr(64,0x144) $(PORT).SER" )
	field( SCAN, "Passive" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
}

# Update fields for ADCore records that we get via GenCP
record( ai, "$(P)$(R)GoldEyeTemperature_RBV" )
{
	field( DESC, "Temperature of camera sensor" )
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetFloat32(0x24104) $(PORT).SER" )
	field( EGU,  "C" )
	field( PREC, "1" )
	field( PINI, "YES" )
 	field( SCAN, "5 second" )
    field( SDIS, "$(SerialDisable)")
}

record( ai, "$(P)$(R)GoldEyeTempMainBd_RBV" )
{
	field( DESC, "Temperature of main board" )
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetFloat32(0x24108) $(PORT).SER" )
	field( EGU,  "C" )
	field( PREC, "1" )
	field( PINI, "YES" )
	field( SCAN, "5 second" )
    field( SDIS, "$(SerialDisable)")
}

record( ai, "$(P)$(R)GoldEyeTempSensorBd_RBV" )
{
	field( DESC, "Temperature of sensor board" )
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetFloat32(0x2410C) $(PORT).SER" )
	field( EGU,  "C" )
	field( PREC, "1" )
	field( PINI, "YES" )
	field( SCAN, "5 second" )
    field( SDIS, "$(SerialDisable)")
}

# AcquireTime
record( ao, "$(P)$(R)EdtAcquireTime" )
{
	field( PREC, "5" )
	field( FLNK, "$(P)$(R)GoldEyeAcquireTime" )
}
record( calcout, "$(P)$(R)GoldEyeAcquireTime" )
{
	field( INPA, "$(P)$(R)EdtAcquireTime NPP MS" )
	field( CALC, "A*1e6" )
	field( EGU,  "us" )
	field( OUT,  "$(P)$(R)GoldEyeExposureValue NPP MS" )
	field( FLNK, "$(P)$(R)GoldEyeExposureValue" )
    field( SDIS, "$(SerialDisable)" )
    field( PINI, "YES" )
}
record( longout, "$(P)$(R)GoldEyeExposureValue" )
{
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x14110) $(PORT).SER" )
	field( EGU,  "us" )
	field( LOPR, "6" )
	field( HOPR, "0x6666666" )
	field( FLNK, "$(P)$(R)GoldEyeExposureValue_RBV" )
    field( SDIS, "$(SerialDisable)")
}

record( longin, "$(P)$(R)GoldEyeExposureValue_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x14110) $(PORT).SER" )
	field( EGU,  "us" )
	field( LOPR, "6" )
	field( HOPR, "0x6666666" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)GoldEyeAcquireTime_RBV" )
    field( SDIS, "$(SerialDisable)")
}
record( calcout, "$(P)$(R)GoldEyeAcquireTime_RBV" )
{
	field( INPA, "$(P)$(R)GoldEyeExposureValue_RBV NPP MS" )
	field( CALC, "A/1e6" )
	field( OUT,  "$(P)$(R)EdtAcquireTime_RBV NPP MS" )
	field( FLNK, "$(P)$(R)EdtAcquireTime_RBV" )
	field( EGU,  "sec" )
}

record( longout, "$(P)$(R)GoldEyeHeartbeatTimeout" )
{
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x1E8) $(PORT).SER" )
	field( EGU,  "ms" )
	field( FLNK, "$(P)$(R)GoldEyeHeartbeatTimeout_RBV" )
    field( SDIS, "$(SerialDisable)")
}

record( longin, "$(P)$(R)GoldEyeHeartbeatTimeout_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x1E8) $(PORT).SER" )
	field( EGU,  "ms" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
}

record( longout, "$(P)$(R)GoldEyeBinX" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)EdtBinX NPP MS" )
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x11108) $(PORT).SER" )
	field( EGU,  "px" )
	field( FLNK, "$(P)$(R)GoldEyeBinX_RBV" )
    field( SDIS, "$(SerialDisable)")
}

record( longin, "$(P)$(R)GoldEyeBinX_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x11108) $(PORT).SER" )
	field( EGU,  "px" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)EdtBinX_RBV" )
}

record( longout, "$(P)$(R)GoldEyeBinY" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)BinY CPP MS" )
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x11128) $(PORT).SER" )
	field( EGU,  "px" )
	field( FLNK, "$(P)$(R)GoldEyeBinY_RBV" )
    field( SDIS, "$(SerialDisable)")
}

record( longin, "$(P)$(R)GoldEyeBinY_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x11128) $(PORT).SER" )
	field( EGU,  "ms" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)EdtBinY_RBV" )
}

record( longout, "$(P)$(R)GoldEyeMinX" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)EdtMinX NPP MS" )
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x1212C) $(PORT).SER" )
	field( EGU,  "px" )
	field( FLNK, "$(P)$(R)GoldEyeMinX_RBV" )
    field( SDIS, "$(SerialDisable)")
}

record( longin, "$(P)$(R)GoldEyeMinX_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x1212C) $(PORT).SER" )
	field( EGU,  "ms" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)EdtMinX_RBV" )
}

record( longout, "$(P)$(R)GoldEyeMinY" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)EdtMinY NPP MS" )
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x12130) $(PORT).SER" )
	field( EGU,  "px" )
	field( FLNK, "$(P)$(R)GoldEyeMinY_RBV" )
    field( SDIS, "$(SerialDisable)")
}

record( longin, "$(P)$(R)GoldEyeMinY_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x12130) $(PORT).SER" )
	field( EGU,  "ms" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)EdtMinY_RBV" )
}

record( longout, "$(P)$(R)GoldEyeSizeX" )
{
	field( DESC, "RegWidth: ROI region width" )
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)EdtSizeX NPP MS" )
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x12124) $(PORT).SER" )
	field( EGU,  "px" )
	field( FLNK, "$(P)$(R)GoldEyeSizeX_RBV" )
    field( SDIS, "$(SerialDisable)")
}

record( longin, "$(P)$(R)GoldEyeSizeX_RBV" )
{
	field( DESC, "RegWidth: ROI region width" )
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x12124) $(PORT).SER" )
	field( EGU,  "ms" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)EdtSizeX_RBV" )
}

record( longout, "$(P)$(R)GoldEyeSizeY" )
{
	field( DESC, "RegHeight: ROI region Height" )
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)EdtSizeY NPP MS" )
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x12128) $(PORT).SER" )
	field( EGU,  "px" )
	field( FLNK, "$(P)$(R)GoldEyeSizeY_RBV" )
    field( SDIS, "$(SerialDisable)")
}

record( longin, "$(P)$(R)GoldEyeSizeY_RBV" )
{
	field( DESC, "RegHeight: ROI region Height" )
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x12128) $(PORT).SER" )
	field( EGU,  "ms" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)EdtSizeY_RBV" )
}

# RegAcquisitionCommand (AcquisitionStart, valid when AcqStartTrMode is Off
record( mbbo, "$(P)$(R)GoldEyeAcquire" )
{
	field( DOL,  "$(P)$(R)Acquire CPP MS" )
	field( OMSL, "closed_loop" )
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x130F4) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Stop" )
	field( ONVL, "1" ) field( ONST, "Start" )
	field( TWVL, "2" ) field( TWST, "Abort" )
    field( SDIS, "$(SerialDisable)")
}

# 0x13160, RegSoftwareTrigger
record( mbbo, "$(P)$(R)GoldEyeSoftwareTrigger" )
{
	field( DOL, "0" )
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x13160) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Off" )
	field( ONVL, "1" ) field( ONST, "On" )
    field( SDIS, "$(SerialDisable)")
}

record( mbbi, "$(P)$(R)EdtTriggerMode" )
{
	field( FLNK, "$(P)$(R)GoldEyeCalcTriggerMode" )
}
record( calcout, "$(P)$(R)GoldEyeCalcTriggerMode" )
{
#	field( TPRO, 2 )
	field( INPA, "$(P)$(R)EdtTriggerMode NPP NMS" )
	field( INPB, "$(P)$(R)AcquirePeriod NPP NMS"  )
	field( CALC, "A==0?(B=0?0:9):1" )
	field( OUT,  "$(P)$(R)GoldEyeFStartTrSrc PP MS" )
	field( FLNK, "$(P)$(R)GoldEyeCalcTriggerEdge" )
}

record( calcout, "$(P)$(R)GoldEyeCalcTriggerEdge" )
{
#	field( TPRO, 2 )
	field( INPA, "$(P)$(R)EdtTriggerMode NPP NMS" )
	field( CALC, "A==2?3:0" )
	field( OUT,  "$(P)$(R)GoldEyeFStartTrEvent PP MS" )
}

# GoldEyePulseAcquireTime
# Write the AcquireTime to the trigger pulse width
record( calcout, "$(P)$(R)GoldEyePulseAcquireTime" )
{
	field( INPA, "$(P)$(R)EdtAcquireTime NPP NMS"  )
	field( INPB, "$(PW_SCALE=1e9)"  )
	field( CALC, "A*B" )
	field( OUT,  "$(PWIDTH=) CA NMS" )
	field( PREC, "0" )
	field( EGU,  "ns" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

# GoldEyePulseAcquireTime_RBV
record( calcout, "$(P)$(R)GoldEyePulseAcquireTime_RBV" )
{
	field( INPA, "$(PW_RBV) NPP NMS" )
	field( INPB, "$(PW_SCALE=1e9)"  )
	field( CALC, "A/B" )
	field( PREC, "5" )
	field( OOPT, "On Change" )
	field( OUT,  "$(P)$(R)EdtAcquireTime_RBV PP MS" )
	field( EGU,  "ns" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

record( ao, "$(P)$(R)AcquirePeriod"	)
{
	field( DISA, "0" )
    field( FLNK, "$(P)$(R)GoldEyeCalcAcquirePeriod" )
	field( PINI, "YES" )
	info( autosaveFields, "PREC VAL" )
	info( archiveFields,  "PREC VAL" )
}

# Min of 0x6666666 from 0x13134 RegFixedIntervalMax
# Min of 7017 from 0x1313C RegFixedIntervalLimit
record( calcout, "$(P)$(R)GoldEyeCalcAcquirePeriod" )
{
	field( INPA, "$(P)$(R)AcquirePeriod" )
	field( INPB, "1e-6" )
	field( CALC, "MIN(A/B,7017)" )
	field( OUT,  "$(P)$(R)GoldEyeAcquirePeriod PP MS" )
    field( HOPR,  0x6666666 )
    field( LOPR,  7017      )
    field( EGU,  "us"       )
}

# Set the acquire period, the rep rate for image capture
# Only works in FreeRun trigger mode
# Argument is an integer in us
record( longout, "$(P)$(R)GoldEyeAcquirePeriod" )
{
    field( DOL,  10000 )
    field( DESC, "Set The Frame Period" )
    field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x13138) $(PORT).SER" )
    field( FLNK, "$(P)$(R)GoldEyeAcquirePeriod_RBV" )
    field( HOPR,  0x6666666 )
    field( LOPR,  7017      )
    field( EGU,  "us"	  )
#	field( TPRO, 2 )
	info( autosaveFields, "DESC VAL" )
    field( SDIS, "$(SerialDisable)")
}


# Read AcquirePeriod, the rep rate for image capture
# Only relevant in FreeRun trigger mode
# Reply value is an integer in us
record( longin, "$(P)$(R)GoldEyeAcquirePeriod_RBV" )
{
    field( DESC, "Frame Period" )
    field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x13138) $(PORT).SER" )
    field( EGU,  "us"  )
	field( FLNK, "$(P)$(R)GoldEyeCalcAcquirePeriod_RBV"	)
    field( SDIS, "$(SerialDisable)")
}

record( calcout, "$(P)$(R)GoldEyeCalcAcquirePeriod_RBV" )
{
	field( INPA, "$(P)$(R)GoldEyeAcquirePeriod_RBV"	)
	field( INPB, "1e-6" )
	field( CALC, "A*B" )
    field( EGU,  "sec"  )
	field( OUT,  "$(P)$(R)AcquirePeriod_RBV PP MS"	)
}
record( ai, "$(P)$(R)AcquirePeriod_RBV"		)
{
	field( DISA, "0" )
}

#	0x13418	RegTriggerEvent, FStartTrEvent: RisingEdge/FallingEdge/AnyEdge/LevelHigh/LevelLow
record( mbbo, "$(P)$(R)GoldEyeFStartTrEvent" )
{
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x13418) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Rising" )
	field( ONVL, "1" ) field( ONST, "Falling" )
	field( TWVL, "2" ) field( TWST, "AnyEdge" )
	field( THVL, "3" ) field( THST, "LevelHi" )
	field( FRVL, "4" ) field( FRST, "LevelLo" )
	field( FLNK, "$(P)$(R)GoldEyeFStartTrEvent_RBV" )
	field( PINI, "YES" )
	info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

record( mbbi, "$(P)$(R)GoldEyeFStartTrEvent_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x13418) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Rising" )
	field( ONVL, "1" ) field( ONST, "Falling" )
	field( TWVL, "2" ) field( TWST, "AnyEdge" )
	field( THVL, "3" ) field( THST, "LevelHi" )
	field( FRVL, "4" ) field( FRST, "LevelLo" )
	field( FLNK, "$(P)$(R)GoldEyeCalcEdtTriggerMode_RBV" )
	field( PINI, "YES" )
}

#	0x134D8	RegTriggerEvent, AcqStartTrEvent: RisingEdge/FallingEdge/AnyEdge/LevelHigh/LevelLow
record( mbbo, "$(P)$(R)GoldEyeAcqStartTrEvent" )
{
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x134D8) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Rising" )
	field( ONVL, "1" ) field( ONST, "Falling" )
	field( TWVL, "2" ) field( TWST, "AnyEdge" )
	field( THVL, "3" ) field( THST, "LevelHi" )
	field( FRVL, "4" ) field( FRST, "LevelLo" )
	field( FLNK, "$(P)$(R)GoldEyeAcqStartTrEvent_RBV" )
	field( PINI, "YES" )
}

record( mbbi, "$(P)$(R)GoldEyeAcqStartTrEvent_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x134D8) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Rising" )
	field( ONVL, "1" ) field( ONST, "Falling" )
	field( TWVL, "2" ) field( TWST, "AnyEdge" )
	field( THVL, "3" ) field( THST, "LevelHi" )
	field( FRVL, "4" ) field( FRST, "LevelLo" )
	field( PINI, "YES" )
}

#	0x13518	RegTriggerEvent, AcqStopTrEvent: RisingEdge/FallingEdge/AnyEdge/LevelHigh/LevelLow
record( mbbo, "$(P)$(R)GoldEyeAcqStopTrEvent" )
{
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x13518) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Rising" )
	field( ONVL, "1" ) field( ONST, "Falling" )
	field( TWVL, "2" ) field( TWST, "AnyEdge" )
	field( THVL, "3" ) field( THST, "LevelHi" )
	field( FRVL, "4" ) field( FRST, "LevelLo" )
	field( FLNK, "$(P)$(R)GoldEyeAcqStopTrEvent_RBV" )
	field( PINI, "YES" )
}

record( mbbi, "$(P)$(R)GoldEyeAcqStopTrEvent_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x13518) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Rising" )
	field( ONVL, "1" ) field( ONST, "Falling" )
	field( TWVL, "2" ) field( TWST, "AnyEdge" )
	field( THVL, "3" ) field( THST, "LevelHi" )
	field( FRVL, "4" ) field( FRST, "LevelLo" )
	field( PINI, "YES" )
}

record( mbbo, "$(P)$(R)GoldEyeFStartTrMode" )
{
	field( DOL,  "1" )
	field( ZRVL, "0" ) field( ZRST, "Off" )
	field( ONVL, "1" ) field( ONST, "On" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)GoldEyeCalcFStartFullTrMode" )
	info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

# FrameStart TriggerSource
record( mbbo, "$(P)$(R)GoldEyeFStartTrSrc" )
{
	field( DOL,  "0" )
	field( ZRVL, "0" ) field( ZRST, "FreeRun" )
	field( ONVL, "1" ) field( ONST, "Line1" )
	field( TWVL, "2" ) field( TWST, "Line2" )
	field( THVL, "3" ) field( THST, "Line3" )
	field( FRVL, "4" ) field( FRST, "Line4" )
	field( FVVL, "5" ) field( FVST, "CC1" )
	field( SXVL, "6" ) field( SXST, "CC2" )
	field( SVVL, "7" ) field( SVST, "CC3" )
	field( EIVL, "8" ) field( EIST, "CC4" )
	field( NIVL, "9" ) field( NIST, "FixedRate" )
	field( TEVL, "10") field( TEST, "Software" )
	field( FLNK, "$(P)$(R)GoldEyeCalcFStartFullTrMode" )
	field( PINI, "YES" )
	info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

# FrameStopTriggerMode combines several bit fields into one 32 bit register, RegFullTriggerMode
# There are 3 of these RegFullTriggerMode registers:
#	Addr		TriggerType			Name
#	0x13410		FrameStart			FStartFullTrMode - The trigger that starts each image
#	0x134D0		AcquisitionStart	AStartFullTrMode - The trigger that starts the acquisition process
#	0x13510		AcquisitionStop		AStopFullTrMode  - The trigger that stops  the acquisition process

# Bit numbering for GeniCam: MSB is 0, LSB is 31 for 32 bit register
# Bit(s)	Name
#	0		TriggerMode: Off/On
#	16-31	TriggerSource enum, valid when TriggerMode is On
#
record( calcout, "$(P)$(R)GoldEyeCalcFStartFullTrMode" )
{
	field( DESC, "FrameStart: Controls image start" )
	field( INPA, "$(P)$(R)GoldEyeFStartTrMode NPP MS" )
	field( INPB, "$(P)$(R)GoldEyeFStartTrSrc  NPP MS" )
	field( CALC, "((A&0x1)<<31)|(B&0xFFFF)" )
	field( OUT,  "$(P)$(R)GoldEyeFStartFullTrMode PP MS" )
}

record( longout, "$(P)$(R)GoldEyeFStartFullTrMode" )
{
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x13410) $(PORT).SER" )
	field( FLNK, "$(P)$(R)GoldEyeFStartFullTrMode_RBV" )
    field( SDIS, "$(SerialDisable)")
}

record( longin, "$(P)$(R)GoldEyeFStartFullTrMode_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x13410) $(PORT).SER" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)GoldEyeCalcFStartTrSrc_RBV" )
}

record( calcout, "$(P)$(R)GoldEyeCalcFStartTrSrc_RBV" )
{
	field( DESC, "FrameStart: Controls image start" )
	field( INPA, "$(P)$(R)GoldEyeFStartFullTrMode_RBV NPP MS" )
	field( CALC, "A&0xFFFF" )
	field( OUT,  "$(P)$(R)GoldEyeFStartTrSrc_RBV  PP MS" )
}

record( mbbo, "$(P)$(R)GoldEyeFStartTrSrc_RBV" )
{
	field( DOL,  "0" )
	field( ZRVL, "0" ) field( ZRST, "FreeRun" )
	field( ONVL, "1" ) field( ONST, "Line1" )
	field( TWVL, "2" ) field( TWST, "Line2" )
	field( THVL, "3" ) field( THST, "Line3" )
	field( FRVL, "4" ) field( FRST, "Line4" )
	field( FVVL, "5" ) field( FVST, "CC1" )
	field( SXVL, "6" ) field( SXST, "CC2" )
	field( SVVL, "7" ) field( SVST, "CC3" )
	field( EIVL, "8" ) field( EIST, "CC4" )
	field( NIVL, "9" ) field( NIST, "FixedRate" )
	field( TEVL, "10") field( TEST, "Software" )
	field( FLNK, "$(P)$(R)GoldEyeCalcEdtTriggerMode_RBV" )
}

record( calcout, "$(P)$(R)GoldEyeCalcEdtTriggerMode_RBV" )
{
#	field( TPRO, 2 )
	field( INPA, "$(P)$(R)GoldEyeFStartTrSrc_RBV NPP NMS" )
	field( INPB, "$(P)$(R)GoldEyeFStartTrEvent   NPP NMS" )
	field( CALC, "A=0?0:(B=0?1:2)" )
	field( OUT,  "$(P)$(R)EdtTriggerMode_RBV PP MS" )
}

#
# Acquisition Start records
#
record( mbbo, "$(P)$(R)GoldEyeAcqStartTrMode" )
{
	field( ZRVL, "0" ) field( ZRST, "Off" )
	field( ONVL, "1" ) field( ONST, "On" )
	field( FLNK, "$(P)$(R)GoldEyeCalcAcqStartFullTrMode" )
	field( PINI, "YES" )
	info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

# Acquisition Start TriggerSource
record( mbbo, "$(P)$(R)GoldEyeAcqStartTrSrc" )
{
	field( DOL, "1" )
	field( ZRVL, "0" ) field( ZRST, "FreeRun" )
	field( ONVL, "1" ) field( ONST, "Line1" )
	field( TWVL, "2" ) field( TWST, "Line2" )
	field( THVL, "3" ) field( THST, "Line3" )
	field( FRVL, "4" ) field( FRST, "Line4" )
	field( FVVL, "5" ) field( FVST, "CC1" )
	field( SXVL, "6" ) field( SXST, "CC2" )
	field( SVVL, "7" ) field( SVST, "CC3" )
	field( EIVL, "8" ) field( EIST, "CC4" )
	field( NIVL, "9" ) field( NIST, "FixedRate" )
	field( TEVL, "10") field( TEST, "Software" )
	field( FLNK, "$(P)$(R)GoldEyeCalcAcqStartFullTrMode" )
	field( PINI, "YES" )
	info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

# FrameStopTriggerMode combines several bit fields into one 32 bit register, RegFullTriggerMode
# There are 3 of these RegFullTriggerMode registers:
#	Addr		TriggerType			Name
#	0x13410		FrameStart			FStartFullTrMode - The trigger that starts each image
#	0x134D0		AcquisitionStart	AcqStartFullTrMode - The trigger that starts the acquisition process
#	0x13510		AcquisitionStop		AcqStopFullTrMode  - The trigger that stops  the acquisition process

# Bit numbering for GeniCam: MSB is 0, LSB is 31 for 32 bit register
# Bit(s)	Name
#	0		TriggerMode: Off/On
#	16-31	TriggerSource enum, valid when TriggerMode is On
#
record( calcout, "$(P)$(R)GoldEyeCalcAcqStartFullTrMode" )
{
	field( DESC, "Acquisition Start: Controls acq process" )
	field( INPA, "$(P)$(R)GoldEyeAcqStartTrMode NPP NMS" )
	field( INPB, "$(P)$(R)GoldEyeAcqStartTrSrc  NPP NMS" )
	field( CALC, "((A&0x1)<<31)|(B&0xFFFF)" )
	field( OUT,  "$(P)$(R)GoldEyeAcqStartFullTrMode PP MS" )
}

record( longout, "$(P)$(R)GoldEyeAcqStartFullTrMode" )
{
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x134D0) $(PORT).SER" )
	field( FLNK, "$(P)$(R)GoldEyeAcqStartFullTrMode_RBV" )
    field( SDIS, "$(SerialDisable)")
}

record( longin, "$(P)$(R)GoldEyeAcqStartFullTrMode_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x134D0) $(PORT).SER" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
}

#
# Acquisition Stop records
#
record( mbbo, "$(P)$(R)GoldEyeAcqStopTrMode" )
{
	field( ZRVL, "0" ) field( ZRST, "Off" )
	field( ONVL, "1" ) field( ONST, "On" )
	field( FLNK, "$(P)$(R)GoldEyeCalcAcqStopFullTrMode" )
	field( PINI, "YES" )
	info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

# Acquisition Stop TriggerSource
record( mbbo, "$(P)$(R)GoldEyeAcqStopTrSrc" )
{
	field( DOL, "1" )
	field( ZRVL, "0" ) field( ZRST, "FreeRun" )
	field( ONVL, "1" ) field( ONST, "Line1" )
	field( TWVL, "2" ) field( TWST, "Line2" )
	field( THVL, "3" ) field( THST, "Line3" )
	field( FRVL, "4" ) field( FRST, "Line4" )
	field( FVVL, "5" ) field( FVST, "CC1" )
	field( SXVL, "6" ) field( SXST, "CC2" )
	field( SVVL, "7" ) field( SVST, "CC3" )
	field( EIVL, "8" ) field( EIST, "CC4" )
	field( NIVL, "9" ) field( NIST, "FixedRate" )
	field( TEVL, "10") field( TEST, "Software" )
	field( FLNK, "$(P)$(R)GoldEyeCalcAcqStopFullTrMode" )
	field( PINI, "YES" )
	info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

# FrameStopTriggerMode combines several bit fields into one 32 bit register, RegFullTriggerMode
# There are 3 of these RegFullTriggerMode registers:
#	Addr		TriggerType			Name
#	0x13410		FrameStart			FStartFullTrMode - The trigger that starts each image
#	0x134D0		AcquisitionStart	AcqStartFullTrMode - The trigger that starts the acquisition process
#	0x13510		AcquisitionStop		AcqStopFullTrMode  - The trigger that stops  the acquisition process

# Bit numbering for GeniCam: MSB is 0, LSB is 31 for 32 bit register
# Bit(s)	Name
#	0		TriggerMode: Off/On
#	16-31	TriggerSource enum, valid when TriggerMode is On
#
record( calcout, "$(P)$(R)GoldEyeCalcAcqStopFullTrMode" )
{
	field( DESC, "Acquisition Stop: Controls acq process" )
	field( INPA, "$(P)$(R)GoldEyeAcqStopTrMode NPP MS" )
	field( INPB, "$(P)$(R)GoldEyeAcqStopTrSrc  NPP MS" )
	field( CALC, "((A&0x1)<<31)|(B&0xFFFF)" )
	field( OUT,  "$(P)$(R)GoldEyeAcqStopFullTrMode PP MS" )
}

record( longout, "$(P)$(R)GoldEyeAcqStopFullTrMode" )
{
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x13510) $(PORT).SER" )
	field( FLNK, "$(P)$(R)GoldEyeAcqStopFullTrMode_RBV" )
    field( SDIS, "$(SerialDisable)")
}

record( longin, "$(P)$(R)GoldEyeAcqStopFullTrMode_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x13510) $(PORT).SER" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
}

# Custom xmit time estimate
#record( ao, "$(P)$(R)XmitRate" )
#{
#    field( DOL,  "40.0e6" )
#    field( EGU,  "Bytes/Sec" )
#    field( PREC, "3" )
#    field( PINI, "YES" )
#    info( autosaveFields, "VAL" )
#}
#record( calc, "$(P)$(R)CamlinkXmitTime" )
#{
#    field( INPA, "$(P)$(R)ArraySize_RBV CP MS" )
#    field( INPB, "$(P)$(R)XmitRate CPP MS" )
#    field( INPC, "$(P)$(R)HTaps_RBV CPP MS" )
#    field( INPD, "$(P)$(R)VTaps_RBV CPP MS" )
#    field( CALC, "(A/B/C/D)" )
#    field( EGU,  "Sec" )
#    field( PREC, "5" ) 
#	field( FLNK, "$(P)$(R)XmitDelay" )
#}
# Needed to add about 3ms to get avg 0.5ms DiffVsExp
record( ao, "$(P)$(R)CamProcDelay" )
{
    field( DOL,  "3.0e-3" )
}

#	0x151D0	RegLineInGlitch Filter[Line1]: 4 byte minimum trigger width in ns
record( longout, "$(P)$(R)GoldEyeLine1GlitchFilter" )
{
	field( DOL,  "1000" )
	field( DTYP, "stream" )
	field( OUT,  "@avtGoldEye008.proto SetUint32(0x151D0) $(PORT).SER" )
	field( EGU,  "ns" )
	field( FLNK, "$(P)$(R)GoldEyeLine1GlitchFilter_RBV" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "VAL" )
}
record( longin, "$(P)$(R)GoldEyeLine1GlitchFilter_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@avtGoldEye008.proto GetUint32(0x151D0) $(PORT).SER" )
	field( EGU,  "ns" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
}

# RegTriggerSourceInq is 32 bit register w/ bits for whether
# each trigger source type is selected
# There are 3 of these RegTriggerSourceInq registers:
#	Addr		TriggerType			GoldEyeValue	Name
#	0x13408		FrameStart			0x0000707		FStartTrSrcInq - The trigger that starts each image
#	0x134C8		AcquisitionStart	0x00001e6		AStartTrSrcInq - The trigger that starts the acquisition process
#	0x13508		AcquisitionStop 	0x00001e6		AStopTrSrcInq  - The trigger that starts the acquisition process
#
#	Bit		Name
#	21		Software
#	22		FixedRate
#	23		CC1
#
#	24		CC2
#	25		CC3
#	26		CC4
#	27		unused
#
#	28		unused
#	29		Ext Trig Line2
#	30		Ext Trig Line1
#	31		FreeRun

# TODO:
#	0x11020	RegSensorInfo: Bits 31..24=RegSensorType 0=Mono, 1=Bayer
#	0x11020	RegSensorInfo: Bits 23..16=RegSensorBits
#	0x12120	RegPixelFormat: 0x1080001=Mono8, 0x1100005=Mono12, 0x1100025=Mono14, 
#	0x13104	RegAcquisitionMode: 1=Continuous, 2=SingleFrame, 3=MultiFrame via RegAcquisitionFrameCount
#	0x13108	RegAcquisitionFrameCount: Frame count for MultiFrame AcquisitionMode
#	0x13424	RegTriggeroverlap:	FStartTriggerOverlap: Ignore/ReTrig
#	0xB00D0	RegAFE_LvdsTestSelector: 4 bytes 0..4
#	0xB00D4	RegAFE_LvdsTestPattern: 4 bytes 0..65535
#

# Monitor and reprocess these records automatically when they're undefined
# Macros:
#	SER_OK_PV:	PV used to verify serial link, blocks reprocess when UDF 
#	MON_PV:		PV to monitor
#	MON_SCAN:	PV used to verify serial link

# Include a serialMonitor.template monitor
# This should be the first PV you process in the EdtReConfigSeq
substitute "MON_SCAN=10 second"
substitute "SER_OK_PV=$(P)$(R)GoldEyeAccessPrivilege.PROC"
include "serialMonitor.template"

# 1 second RBV monitors
substitute "MON_SCAN=1 second"
substitute "MON_PV=$(P)$(R)GoldEyeExposureValue_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)GoldEyeAcqStartFullTrMode_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)GoldEyeAcqStopFullTrMode_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)GoldEyeHeartbeatTimeout_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)GoldEyeFStartFullTrMode_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)GoldEyeLine1GlitchFilter"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)GoldEyeFStartTrSrc"
include "rbvMonitor.template"

# 10 second RBV monitors
substitute "MON_SCAN=10 second"
substitute "MON_PV=$(P)$(R)OrcaHeight_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)Model_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)Manufacturer_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)GoldEyeSerialNumber_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)GoldEyeFirmwareVersion_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)GoldEyeModel_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)GoldEyeTempMainBd_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)GoldEyeTempSensorBd_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)GoldEyeTemperature_RBV"
include "rbvMonitor.template"

# 1 second PUT monitors
substitute "MON_SCAN=1 second"
substitute "MON_PV= $(P)$(R)GoldEyeAccessPrivilege"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)GoldEyeExposureValue"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)GoldEyeBinX"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)GoldEyeBinY"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)GoldEyeMinX"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)GoldEyeMinY"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)GoldEyeSizeX"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)GoldEyeSizeY"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)GoldEyeAcquirePeriod"
include "putMonitor.template"
substitute "MON_PV= $(R)GoldEyeFStartTrEvent"
include "putMonitor.template"
substitute "MON_PV= $(R)GoldEyeAcqStartTrEvent"
include "putMonitor.template"
substitute "MON_PV= $(R)GoldEyeAcqStopTrEvent"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)GoldEyeFStartFullTrMode"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)GoldEyeAcqStartFullTrMode"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)GoldEyeAcqStopFullTrMode"
include "putMonitor.template"
substitute "MON_PV= $(R)GoldEyeAcquire"
include "putMonitor.template"
substitute "MON_PV= $(R)GoldEyeResetDevice"
include "putMonitor.template"

# 10 second PUT monitors
substitute "MON_SCAN=10 second"
substitute "MON_PV= $(P)$(R)GoldEyeLine1GlitchFilter"
include "putMonitor.template"
substitute "MON_PV= $(R)GoldEyeSoftwareTrigger"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)GoldEyeHeartbeatTimeout"
include "putMonitor.template"

