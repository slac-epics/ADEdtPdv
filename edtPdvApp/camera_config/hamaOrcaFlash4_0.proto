#
PeekSize        = 0;
Terminator      = CR;
# InTerminator	= LF;
# OutTerminator	= LF;
ReplyTimeout	= 500;
ReadTimeout		= 100;
WriteTimeout	= 100;
ExtraInput		= Ignore;
#ExtraInput		= Error;

# Safe command to send to test communications
ComTest
{
	out	"?VER";
	in	 "VER %s";
}

# Get firmware version
GetFirmware
{
	out	"?VER";
	in	 "VER %s";
}

# Get info string
GetInfo
{
	out	"?INF";
	in	 "INF %s";
}

# Get camera model name
GetModel
{
	out	"?CAI T";
	in	 "CAI T %s";
}

# Get camera serial number
GetSerialNumber
{
	out	"?CAI N";
	in	 "CAI N %s";
}

# GetHeight - CCD Effective Vertical Pixel count
GetHeight
{
	out	"?CAI V";
	in	 "CAI V %d";
}

# GetWidth - CCD Effective Horizontal Pixel count
GetWidth
{
	out	"?CAI H";
	in	 "CAI H %d";
}

# GetCoolingMethod - Air or Water
GetCoolingMethod
{
	out	"?CAI C";
	in	 "CAI C %{A|W}";
}

GetActualExposure
{
	out "?RAT";
	in	 "RAT %f";
}

GetAcquireTime
{
	out "?AET";
	in	 "AET %f";
}

SetAcquireTime
{
	out "AET %f";
	in	"AET %*f";
}

# Get Start Exposure Timing Mode
#	0	= Normal free run
#	1	= External trigger
#	2	= Start (Ext trig initiates free run)
#	3	= Light sheet (Like a copy machine, readout follows
#                      a sheet of light across the sample)
GetTriggerMode
{
	out "?AMD";
	in	 "AMD %{N|E|S|L}";
}

# Set Start Exposure Timing Mode
#	0	= Normal free run
#	1	= External trigger
#	2	= Start (Ext trig initiates free run)
#	3	= Light sheet (Like a copy machine, readout follows
#                      a sheet of light across the sample)
SetTriggerMode
{
	out "AMD %{N|E|S|L}";
	in  "AMD %*{N|E|S|L}";
}

# Get External Trigger Delay
GetExtTrigDelay
{
	out "?ATD";
	in	 "ATD %f";
}

# Set External Trigger Delay
SetExtTrigDelay
{
	out "ATD %f";
	in	"ATD %*f";
}

# Get External Trigger Exposure Mode
#	0	= Edge, Exposure time from AET
#	1	= Level, Exposure time from pulse duration
#	2	= Synchronous, Exposes from trigger to trigger
GetExtTrigMode
{
	out "?EMD";
	in	 "EMD %{E|L|S}";
}

# Set External Trigger Exposure Mode
#	0	= Edge
#	1	= Level
#	2	= Synchronous
SetExtTrigMode
{
	out "EMD %{E|L|S}";
	in	"EMD %*{E|L|S}";
}

# Get External Trigger Polarity
#	0	= Negative
#	1	= Positive
GetExtTrigPolarity
{
	out "?ATP";
	in	 "ATP %{N|P}";
}

# Set External Trigger Exposure Polarity
#	0	= Negative
#	1	= Positive
SetExtTrigPolarity
{
	out "ATP %{N|P}";
	in	"ATP %*{N|P}";
}

# Get Scanning Mode
#	0	= Normal
#	1	= Binning
#	2	= Sub-array (Vertical Double Scan)
GetScanMode
{
	out "?SMD";	
	in	 "SMD %{N|S|W}";
}

# Set Scanning Mode
#	0	= Normal
#	1	= Binning
#	2	= Sub-array (Vertical Double Scan)
SetScanMode
{
	out "SMD %{N|S|W}";
	in  "SMD %*{N|S|W}";
}

# Get Scanning Speed
#	0	= Std speed
#	1	= Slow speed
GetScanSpeed
{
	out "?SSP";	
	in	 "SSP %{H|S}";
}

# Set Scanning Speed
#	0	= Std speed
#	1	= Slow speed
SetScanSpeed
{
	out "SSP %{H|S}";
	in  "SSP %*{H|S}";
}

# ROI Control
# ROI is implemented via Vertical Double Scan, or Sub-Array scanning mode, SMD W
#
# Get Vertical Double Scan command: ?SDV
# Returns: topOffset,botOffset,vertSize
GetVertDblScan
{
	out "?SDV";
	in	"SDV %(\$1OrcaScanTop_RBV)u,%(\$1OrcaScanBot_RBV)u,%u";
}

# Set Vertical Double Scan command: SDV topOffset,botOffset,vertSize
#	topOffset: Same as AreaDetector MinX, first line of the ROI region relative to 0 for the top line
#	botOffset: Should be zero unless you want a gap between top and bottom regions
#	vertSize:  1/2 ROI SizeX, Normally (1024 - topOffset) to readout a symmetrical region around the center
# Constraints:
#	All params must be multiples of 4
#	vert size + either offset <= 1024
# Example: SDV 924,0,100
#	for 200 line readout starting at line 924
SetVertDblScan
{
	out	"SDV %(\$1OrcaScanTop)u,%(\$1OrcaScanBot)u,%u";
	in	"SDV %(\$1OrcaScanTop_RBV)u,%(\$1OrcaScanBot_RBV)u,%(\$1OrcaScanSize_RBV)u";
}

# SPX {1|2|4} Set binning factor

# Get Pixel Correction Mode
#	F	= Off
#	O	= On
GetPixelCorr
{
	out "?PEC";
	in	"PEC %{F|O}";
}

# Set Pixel Correction Mode
#	F	= Off
#	O	= On
SetPixelCorr
{
	out "PEC %{F|O}";
	in	"PEC %*{F|O}";
}

# Get Cooling Mode
#	O	= On  (default for air cooling)
#	M	= Max (only valid for water cooling)
#	F	= Off (default for water cooling)
GetCoolingMode
{
	out	"?CSW";	
	in	"CSW %{O|M|F}";
}

# Set Cooling Mode
#	O	= On  (default for air cooling)
#	M	= Max (only valid for water cooling)
#	F	= Off (default for water cooling)
SetCoolingMode
{
	out "CSW %{O|M|F}";
	in  "CSW %*{O|M|F}";
}

# ACT {I,S}
# ACquire Type: Imaging or Stop
Start
{
	out	"ACT I";
}
Stop
{
	out	"ACT S";
}
