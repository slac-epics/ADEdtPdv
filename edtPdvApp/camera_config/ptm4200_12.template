#
# EPICS database for
# Pulnix 4200 Camera in 10 bit mode
#
# Protocol root must match db filename root
# i.e. ptm4200_12.proto

record( stringin, "$(P)$(R)CamModel" )
{
	field( VAL,  "ptm4200_12" )
	field( PINI, "YES" )
}

record( stringin, "$(P)$(R)CamModelScreen" )
{
	field( VAL,  "edtPdvScreens/ptm4200_12.edl" )
	field( PINI, "YES" )
}

# Provide defaults for ADCore SizeX and SizeY
# Limit SizeX to 2048 
record(longout, "$(P)$(R)SizeX")
{
	field( LOPR, 2048 )
	field( HOPR, 2048 )
	field( HIGH, 2049 )
	field( VAL, "2048" )
	field( HSV,  "MINOR" )
}

# SizeY can vary as 4200 supports vert hwroi
record( longout, "$(P)$(R)SizeY" )
{
	field( LOPR, 2 )
	field( HOPR, 2048 )
	field( HIGH, 2049 )
	field( VAL, "2048" )
	field( HSV,  "MINOR" )
	field( FLNK, "$(P)$(R)EdtSizeY" )
}

# Redirect FLNK's from Gain to EdtGain to PulnixGain
# Gain and EdtGain use range 0..16k
record( ao, "$(P)$(R)Gain" )
{
	field( DRVH, "0xFFFFFF" )
	field( DRVL, "0" )
	field( HOPR, "0xFFFFFF" )
	field( LOPR, "0" )
	field( FLNK, "$(P)$(R)EdtGain" )
	field( PINI, "YES" )
}
record( ao, "$(P)$(R)EdtGain" )
{
	field( DRVH, "0xFFFFFF" )
	field( DRVL, "0" )
	field( HOPR, "0xFFFFFF" )
	field( LOPR, "0" )
	field( FLNK, "$(P)$(R)PulnixGain" )
}
#
# The Pulnix 4200 camera has 2 gain controls, A & B
# with range 0x000 to 0xFFF
# A is master gain, and B is fine gain
# For compatibility w/ ADCore's single gain control,
# calc records are used to set A & B
record( dfanout, "$(P)$(R)PulnixGain" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)EdtGain MS" )
	field( DESC, "Set camera gain" )
	field( HOPR, "0xFFFFFF" )
	field( LOPR, "0" )
	field( FLNK, "$(P)$(R)PulnixGainA" )
}
record( calcout, "$(P)$(R)PulnixGainA" )
{
	field( DESC, "Gain A, master" )
	field( INPG, "$(P)$(R)PulnixGain" )
	field( CALC, "G>>12" )
	field( OUT,  "$(P)$(R)PulnixSetGainA PP" )
	field( FLNK, "$(P)$(R)PulnixGainB" )
}
record( calcout, "$(P)$(R)PulnixGainB" )
{
	field( DESC, "Gain A, find" )
	field( INPG, "$(P)$(R)PulnixGain" )
	field( CALC, "G&0xFFF" )
	field( OUT,  "$(P)$(R)PulnixSetGainB PP" )
}

record( longout, "$(P)$(R)PulnixSetGainA" )
{
	field( DESC, "Set camera gain A" )
	field( OMSL, "closed_loop" )
	field( DOL,	 "$(P)$(R)PulnixGainA CPP" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm4200_12.proto SetGainA $(PORT).SER" )
	field( DRVH, "0xFFF" )
	field( DRVL, "0x000" )
    field( SDIS, "$(SerialDisable)")
}
record( longout, "$(P)$(R)PulnixSetGainB" )
{
	field( DESC, "Set camera gain B" )
	field( OMSL, "closed_loop" )
	field( DOL,	 "$(P)$(R)PulnixGainB CPP" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm4200_12.proto SetGainB $(PORT).SER" )
	field( DRVH, "0xFFF" )
	field( DRVL, "0x000" )
    field( SDIS, "$(SerialDisable)")
}

record( seq, "$(P)$(R)EdtReConfigSeq" )
{
#	field( DLY1, 0.5 ) field( DOL1, "1" )	field( LNK1, "$(P)$(R)PulnixRefVoltA_RBV.PROC CA NMS" )
#	field( DLY1, 0.5 ) field( DOL1, "1" )	field( LNK2, "$(P)$(R)PulnixRefVoltB_RBV.PROC CA NMS" )
#	field( DLY1, 0.5 ) field( DOL1, "1" )	field( LNK3, "$(P)$(R)PulnixGetRawShutter.PROC CA NMS" )
#	field( DLY1, 0.5 ) field( DOL1, "1" )	field( LNK4, "$(P)$(R)PulnixGetRawTriggerMode.PROC CA NMS" )
#	field( DLY1, 0.5 ) field( DOL1, "1" )	field( LNK5, "$(P)$(R)PulnixModelID_RBV.PROC CA NMS" )
#	field( DLY1, 0.5 ) field( DOL1, "1" )	field( LNK6, "$(P)$(R)PulnixFirmware_RBV.PROC CA NMS" )
}

# Reference voltage commands
record( longout, "$(P)$(R)PulnixRefVoltA" )
{
	field( DESC, "Set ref voltage A, master" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm4200_12.proto SetRefVoltA $(PORT).SER" )
	field( DRVL, "0x000" )
	field( DRVH, "0xFFF" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)PulnixRefVoltA_RBV" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "VAL" )
}
record( longin, "$(P)$(R)PulnixRefVoltA_RBV" )
{
	field( DESC, "Get ref voltage A, master" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm4200_12.proto GetRefVoltA $(PORT).SER" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "VAL" )
}


record( longout, "$(P)$(R)PulnixRefVoltB" )
{
	field( DESC, "Set ref voltage B, fine" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm4200_12.proto SetRefVoltB $(PORT).SER" )
	field( DRVL, "0x000" )
	field( DRVH, "0xFFF" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)PulnixRefVoltB_RBV" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "VAL" )
}
record( longin, "$(P)$(R)PulnixRefVoltB_RBV" )
{
	field( DESC, "Get ref voltage B, fine" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm4200_12.proto GetRefVoltB $(PORT).SER" )
    field( SDIS, "$(SerialDisable)")
	field( PINI, "YES" )
	info( autosaveFields, "VAL" )
}

record( ao, "$(P)$(R)AcquireTime" )
{
	field( FLNK, "$(P)$(R)EdtAcquireTime" )
	field( PREC, "5" )
}
record( ao, "$(P)$(R)EdtAcquireTime" )
{
	field( FLNK, "$(P)$(R)PulnixFreeRunAcquireTime" )
}

# PulnixFreeRunAcquireTime
# Map AcquireTime in sec to Pulnix manual shutter values
# Pulnix ManualShutter Values
#	0	-	Manual No Shutter
#	1-8	-	1=1/60, 2=1/125, 3=1/250, 4=2/500, 5=1/1000, 6=1/2000, 7=1/4000, 8=1/8000, 9=1/16000
# Internal shutter speeds are powers of 2 relative to 1/250, so
# A = 1/(60.5*2**(X-1)
# 2**(X-1) = (0.017/A)
# (X-1) = LN(0.017/A)/LN(2)
# X = LN(0.017/A)/LN(2) + 1
record( calc, "$(P)$(R)PulnixFreeRunAcquireTime" )
{
	field( INPA,  "$(P)$(R)AcquireTime NPP NMS"  )
	field( CALC,  "MAX(0,MIN(9,LN(0.017/A)/LN(2)+1))" )
	field( PREC, "0" )
	field( FLNK, "$(P)$(R)PulnixExtTrigAcquireTime" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}
# PulnixExtTrigAcquireTime
# Map AcquireTime in sec to Pulnix internal shutter values
#	1-8	-	1=1/16000, 2=1/8000, 3=1/4000, 4=1/2000, 5=1/1000,6=1/500,7=1/250,8=1/125
# Internal shutter speeds are powers of 2 relative to 1/125, so
# A = 1/(125*2**(8-X)
# 2**(8-X) = (0.004/A)
# (8-X) = LN(0.004/A)/LN(2)
# X = 8 - LN(0.004/A)/LN(2)
record( calcout, "$(P)$(R)PulnixExtTrigAcquireTime" )
{
	field( INPA,  "$(P)$(R)AcquireTime NPP NMS"  )
	field( CALC,  "MAX(1,MIN(8,8-LN(.004/A)/LN(2)))" )
	field( PREC, "0" )
	field( FLNK, "$(P)$(R)PulnixPulseAcquireTime" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

# PulnixPulseAcquireTime
# For pulse width, we use Async setting 9 and
# write the AcquireTime to the trigger pulse width
# TODO: Minimum required trigger pulse width is 5us (p.40)
# TODO: Actual exposure is pulse width + 20.5us (p.40)
record( calcout, "$(P)$(R)PulnixPulseAcquireTime" )
{
	field( INPA, "$(P)$(R)AcquireTime NPP NMS"  )
	field( INPB, "$(PW_SCALE=1e9)"  )
	field( DOPT, "Use OCAL" )
	field( OOPT, "On Change" )
	field( OCAL, "A*B" )
	field( OUT,  "$(PWIDTH=) CA NMS" )
	field( CALC, "9" )
	field( PREC, "0" )
	field( FLNK, "$(P)$(R)PulnixShutterCmdSelect" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

record( longin, "$(P)$(R)PulnixGetRawShutter" )
{
	field( DESC, "Raw Numeric shutter value" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm4200_12.proto GetShutter $(PORT).SER " )
    field( SDIS, "$(SerialDisable)")
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)PulnixShutterReadSelect" )
}

record( longout, "$(P)$(R)PulnixRawShutter" )
{
	field( DESC, "Raw Numeric shutter value" )
	field( PINI, "YES" )
}

record( calc, "$(P)$(R)PulnixShutterReadSelect" )
{
	field( CALC, "A+1" )
	field( INPA, "$(P)$(R)PulnixTriggerMode" )
	field( FLNK, "$(P)$(R)PulnixShutterReadFanout" )
}

record( dfanout, "$(P)$(R)PulnixShutterReadFanout" )
{
	field( DESC, "Selects shutter read cmd" )
	field( OMSL, "closed_loop" )
#	field( DOL,	 "$(P)$(R)PulnixShutter" )
	field( DOL,	 "1" )
	field( SELL, "$(P)$(R)PulnixShutterReadSelect" )
	field( SELM, "Specified" )
	field( OUTA, "$(P)$(R)PulnixCalcFreeRunShutter.PROC PP" )
	field( OUTB, "$(P)$(R)PulnixCalcExtTrigShutter.PROC PP" )
	field( OUTC, "$(P)$(R)PulnixPulseAcquireTime_RBV.PROC PP" )
	field( PINI, "YES" )
}

# PulnixCalcFreeRunShutter
# Map Pulnix manual shutter values to AcquireTime in sec
# Pulnix ManualShutter Values
#	0	-	Manual No Shutter
#	1-8	-	1=1/60, 2=1/125, 3=1/250, 4=2/500, 5=1/1000, 6=1/2000, 7=1/4000, 8=1/8000, 9=1/16000
# Internal shutter speeds are powers of 2 relative to 1/250, so
# X = 1/(60.5*2**(A-1)
record( calcout, "$(P)$(R)PulnixCalcFreeRunShutter" )
{
	field( INPA,  "$(P)$(R)PulnixGetRawShutter NPP NMS" )
	field( CALC,  "1/(60.5*2**(A-1))" )
	field( PREC, "5" )
	field( OOPT, "On Change" )
	field( OUT,  "$(P)$(R)EdtAcquireTime_RBV PP MS" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}
# PulnixCalcExtTrigShutter
# Map AcquireTime in sec to Pulnix internal shutter values
#	1-8	-	1=1/16000, 2=1/8000, 3=1/4000, 4=1/2000, 5=1/1000,6=1/500,7=1/250,8=1/125
# Internal shutter speeds are powers of 2 relative to 1/500, so
# X = 1/(125*2**(8-A)
record( calcout, "$(P)$(R)PulnixCalcExtTrigShutter" )
{
	field( INPA, "$(P)$(R)PulnixGetRawShutter NPP NMS" )
	field( CALC, "1/(125*2**(8-A))" )
	field( PREC, "5" )
	field( OOPT, "On Change" )
	field( OUT,  "$(P)$(R)EdtAcquireTime_RBV PP MS" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}
# PulnixPulseAcquireTime_RBV
# For pulse width, we use Async setting 9 and
# write the AcquireTime to the trigger pulse width
record( calcout, "$(P)$(R)PulnixPulseAcquireTime_RBV" )
{
	field( INPA, "$(PW_RBV) NPP NMS" )
	field( INPB, "$(PW_SCALE=1e9)"  )
	field( CALC, "A/B" )
	field( EGU,  "ns" )
	field( PREC, "5" )
	field( OOPT, "On Change" )
	field( OUT,  "$(P)$(R)EdtAcquireTime_RBV PP MS" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

# Make EdtTriggerMode FLNK to PulnixTriggerMode
record( mbbi, "$(P)$(R)EdtTriggerMode" )
{
	field( FLNK, "$(P)$(R)PulnixTriggerMode" )
}
record( mbbo, "$(P)$(R)PulnixTriggerMode" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)EdtTriggerMode NPP NMS" )
	field( ZRVL, "0" )	field( ZRST, "FreeRun" )
	field( ONVL, "1" )	field( ONST, "External" )
	field( TWVL, "2" )	field( TWST, "Pulse" )
	field( FLNK, "$(P)$(R)PulnixShutterCmdSelect" )
}

# Sends :SHR?
# Recvs o<mode>S<num>
# where mode is:
#	A - Async  shutter mode
#	D - Direct shutter mode
#	M - Manual shutter mode
# and num is an integer whose meaning varies w/ the shutter mode
record( longin, "$(P)$(R)PulnixGetRawTriggerMode" )
{
	field( DESC, "Raw shutter trigger mode" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm4200_12.proto GetTriggerMode $(PORT).SER " )
    field( SDIS, "$(SerialDisable)")
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)PulnixCalcTriggerMode" )
}

record( calcout, "$(P)$(R)PulnixCalcTriggerMode" )
{
	field( INPA,  "$(P)$(R)PulnixGetRawTriggerMode NPP NMS"  )
	field( INPB,  "$(P)$(R)PulnixGetRawShutter NPP NMS"  )
	field( CALC,  "A==0?0:(A==1?(B!=9?1:2):3)" )
	field( PREC, "0" )
	field( OUT,  "$(P)$(R)PulnixTriggerMode_RBV PP MS" )
	field( FLNK, "$(P)$(R)PulnixPulseAcquireTime" )
}
record( mbbi, "$(P)$(R)PulnixTriggerMode_RBV" )
{
	field( ZRVL, "0" )	field( ZRST, "FreeRun" )
	field( ONVL, "1" )	field( ONST, "External" )
	field( TWVL, "2" )	field( TWST, "Pulse" )
	field( THVL, "3" )	field( THST, "Direct" )
	field( FLNK, "$(P)$(R)EdtTriggerMode_RBV" )
}
# Make EdtTriggerMode_RBV get it's value from PulnixTriggerMode_RBV
record( mbbo, "$(P)$(R)EdtTriggerMode_RBV" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)PulnixTriggerMode_RBV NPP MS" )
}

record( calc, "$(P)$(R)PulnixShutterCmdSelect" )
{
	field( CALC, "A+1" )
	field( INPA, "$(P)$(R)PulnixTriggerMode NPP NMS" )
	field( FLNK, "$(P)$(R)PulnixShutterCmdFanout" )
}

record( dfanout, "$(P)$(R)PulnixShutterCmdFanout" )
{
	field( DESC, "Selects shutter cmd" )
	field( OMSL, "closed_loop" )
	field( SELL, "$(P)$(R)PulnixShutterCmdSelect" )
	field( SELM, "Specified" )
	field( DOL,  "1" )
	field( OUTA, "$(P)$(R)PulnixSetFreeRunShutter.PROC PP" )
	field( OUTB, "$(P)$(R)PulnixSetExtTrigShutter.PROC PP" )
	field( OUTC, "$(P)$(R)PulnixSetPulseShutter.PROC PP" )
	field( FLNK, "$(P)$(R)PulnixGetRawTriggerMode" )
}

record( longout, "$(P)$(R)PulnixSetExtTrigShutter" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)PulnixExtTrigAcquireTime NPP NMS" )
	field( DESC, "Select Async shutter speeds" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm4200_12.proto SetAsyncShutter $(PORT).SER " )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)PulnixGetRawShutter PP" )
}

record( longout, "$(P)$(R)PulnixSetDirectShutter" )
{
	field( DESC, "Direct shutter setting" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm4200_12.proto SetDirectShutter $(PORT).SER " )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)PulnixGetRawShutter PP" )
}

record( longout, "$(P)$(R)PulnixSetPulseShutter" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)PulnixPulseAcquireTime NPP NMS" )
	field( DESC, "Select Async pulse width shutter" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm4200_12.proto SetAsyncShutter $(PORT).SER " )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)PulnixSetTrigPulseWidth" )
}
record( calcout, "$(P)$(R)PulnixSetTrigPulseWidth" )
{
	field( INPA, "$(P)$(R)AcquireTime NPP NMS"  )
	field( INPB, "$(PW_SCALE=1e9)"  )
	field( CALC, "A*B" )
	field( PREC, "0" )
	field( OUT,  "$(PWIDTH=) CA NMS" )
	field( FLNK, "$(P)$(R)PulnixGetRawShutter" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

record( longout, "$(P)$(R)PulnixSetFreeRunShutter" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)PulnixFreeRunAcquireTime NPP NMS" )
	field( DESC, "Select FreeRun shutter speeds" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm4200_12.proto SetManualShutter $(PORT).SER " )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)PulnixGetRawShutter PP" )
}

#record( mbbi, "$(P)$(R)PulnixShutter" )
#{
#	field( DESC, "Camera shutter speed" )
#	field( ZRVL, "0"	) field( ZRST, "1/250"	)
#	field( ONVL, "1"	) field( ONST, "1/500"	)
#	field( TWVL, "2"	) field( TWST, "1/1000"	)
#	field( THVL, "3"	) field( THST, "1/2000"	)
#	field( FRVL, "4"	) field( FRST, "1/4000"	 )
#	field( FVVL, "5"	) field( FVST, "1/8000"	 )
#	field( SXVL, "6"	) field( SXST, "1/16000" )
#	field( SVVL, "7"	) field( SVST, "1/32000" )
#	field( EIVL, "8"	) field( EIST, "1/64000" )
#	field( NIVL, "9"	) field( NIST, "Pulse"	 )
#	field( FLNK, "$(P)$(R)PulnixTriggerModeFanout PP" )
#	field( PINI, "YES" )
#}

record( bo, "$(P)$(R)PulnixAutoGain" )
{
	field( DESC, "Auto Gain Balance" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm4200_12.proto SetAutoGain $(PORT).SER" )
    field( SDIS, "$(SerialDisable)")
	field( ZNAM, "Disabled" )
	field( ONAM, "Enabled" )
	field( PINI, "YES" )
}

record( stringin, "$(P)$(R)PulnixModelID_RBV" )
{
	field( DESC, "Camera reported model" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm4200_12.proto GetModel $(PORT).SER" )
    field( SDIS, "$(SerialDisable)")
	field( PINI, "YES" )
}

record( stringin, "$(P)$(R)PulnixFirmware_RBV" )
{
	field( DESC, "Camera reported vers" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm4200_12.proto GetVers $(PORT).SER" )
    field( SDIS, "$(SerialDisable)")
	field( PINI, "YES" )
}

# Pulnix 4200 supports Vertical ROI in the camera
record( longout, "$(P)$(R)EdtHwVROI_RBV" )
{
	field( VAL,  "1" )
}

# Redirect FLNK of EdtMinY to PulnixMinY
record( longin, "$(P)$(R)EdtMinY" )
{
	field( FLNK, "$(P)$(R)PulnixMinY" )
}

# Redirect FLNK of EdtSizeY to PulnixSizeY
record( longin, "$(P)$(R)EdtSizeY" )
{
	field( VAL,  "2048" )
	field( FLNK, "$(P)$(R)PulnixSizeY" )
}

record( longout, "$(P)$(R)PulnixMinY" )
{
	field( DOL,  "0" )
	field( DTYP, "stream" )
	field( LOPR, "0" )
	field( HOPR, "2047" )
	field( OUT,  "@ptm4200_12.proto SetHWROI($(P)$(R)) $(PORT).SER" )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)PulnixMinY_RBV" )
}

record( longin, "$(P)$(R)PulnixMinY_RBV" )
{
	field( INP,  "$(P)$(R)PulnixMinY NPP MS" )
	field( FLNK, "$(P)$(R)EdtMinY_RBV" )
}

record( longout, "$(P)$(R)PulnixSizeY" )
{
	field( DOL,  "2048" )
	field( DTYP, "stream" )
	field( LOPR, "1" )
	field( HOPR, "2048" )
	field( OUT,  "@ptm4200_12.proto SetHWROI($(P)$(R)) $(PORT).SER" )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)EdtSizeY_RBV" )
}


# TODO: Should we try to support 2x2 binning?
# Pulnix 4200 supports 2x2 binning but not w/ HW ROI
# Must select Preset Scan Area type T for
# fixed 1024x1024 readout w/ 2x2 binning
record( longout, "$(P)$(R)BinX" ) { field( DISA, 1 ) }
record( longout, "$(P)$(R)BinY" ) { field( DISA, 1 ) }
record( longin,  "$(P)$(R)BinX_RBV" )
{
	field( VAL,  "1" )
	field( PINI, "YES" )
}
record( longin,  "$(P)$(R)BinY_RBV" )
{
	field( VAL,  "1" )
	field( PINI, "YES" )
}

# Original formula from p32 of TM-4200CLman-RevA.pdf was wrong
# That formula doesn't work, yielding longer XmitTime for smaller SizeY 
# Should be 67.6ms for full res 15Hz, i.e. 2080 * 32.5us.
# Revised formula from JAI Help Center
# XmitTime = (CEIL((MinY_RBV+16)/8)+16+CEIL((2056-MinY_RBV-SizeY_RBV)/8)+SizeY_RBV)*32.5us
# In testing, ?
# full 2048 line readout matches this formula pretty well,
# but setting SizeY to small numbers results in too long a XmitTime
# compared to when the image is received.  Needs more work.
record( calc, "$(P)$(R)CamlinkXmitTime" )
{
    field( INPA, "$(P)$(R)MinY_RBV CP MS" )
    field( INPB, "$(P)$(R)SizeY_RBV CPP MS" )
    field( INPC, "32.5e-6" )
    field( CALC, "(CEIL((A+16)/8)+CEIL((2056-B-A)/8)+B)*C" )
    field( EGU,  "Sec" )
    field( PREC, "5" ) 
	field( FLNK, "$(P)$(R)XmitDelay" )
}

record( ao, "$(P)$(R)CamProcDelay" )
{
    field( DOL,  "3.0e-4" )
}

# Pulnix trigger polarity
# Set via :TAH={ActiveLow,ActiveHigh}
record( mbbo, "$(P)$(R)PulnixTriggerPolarity" )
{
	field( DOL,  "1" )
	field( DTYP, "stream" )
	field( OUT,  "@ptm4200_12.proto SetTrigPolarity $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "ActiveLow" )
	field( ONVL, "1" )	field( ONST, "ActiveHigh" )
	field( PINI, "YES" )
	info( autosaveFields, "VAL" )
}

# Monitor and reprocess these records automatically when they're undefined
# Macros:
#	SER_OK_PV:	PV used to verify serial link, blocks reprocess when UDF 
#	MON_PV:		PV to monitor
#	MON_SCAN:	PV used to verify serial link

# Include a serialMonitor.template monitor
# This should be the first PV you process in the EdtReConfigSeq
substitute "MON_SCAN=10 second"
substitute "SER_OK_PV=$(P)$(R)PulnixGetRawShutter"
include "serialMonitor.template"

# 1 second RBV monitors
substitute "MON_SCAN=1 second"
substitute "MON_PV=$(P)$(R)PulnixGetRawTriggerMode"
include "rbvMonitor.template"

# 10 second RBV monitors
substitute "MON_SCAN=10 second"
substitute "MON_PV=$(P)$(R)PulnixRefVoltA_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)PulnixRefVoltB_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)PulnixModelID_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)PulnixFirmware_RBV"
include "rbvMonitor.template"

# 1 second PUT monitors
substitute "MON_SCAN=1 second"
substitute "MON_PV= $(P)$(R)PulnixMinY"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)PulnixSetExtTrigShutter"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)PulnixSetDirectShutter"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)PulnixSetPulseShutter"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)PulnixSetFreeRunShutter"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)PulnixSizeY"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)PulnixSetGainA"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)PulnixSetGainB"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)PulnixRefVoltA"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)PulnixRefVoltB"
include "putMonitor.template"

# 10 second PUT monitors
substitute "MON_SCAN=10 second"
substitute "MON_PV= $(P)$(R)PulnixAutoGain"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)PulnixTriggerPolarity"
include "putMonitor.template"
