#
# EPICS database for
# Hamamatsu Orca Flash 4.0 Scientfic CMOS Camera
#
# EPICS DB file for records specific to this model of camera
#
# Protocol root must match db filename root
# i.e. hamaOrcaFlash4_0.proto

record( seq, "$(P)$(R)EdtReConfigSeq" )
{
	field( DLY1, 0   ) field( DOL1, "1" )	field( LNK1, "$(P)$(R)OrcaAcquireTime_RBV.PROC CA NMS"  )
	field( DLY2, 0.2 ) field( DOL2, "1" )	field( LNK2, "$(P)$(R)OrcaTriggerMode_RBV.PROC CA NMS"  )
	field( DLY3, 0.2 ) field( DOL3, "1" )	field( LNK3, "$(P)$(R)OrcaScanSize_RBV.PROC CA NMS"  )
# These get processed at least once via PINI and now have rbvMonitor's so no need to reread
#	field( DLY4, 0.5 ) field( DOL4, "1" )	field( LNK4, "$(P)$(R)OrcaHeight_RBV.PROC CA NMS"  )
#	field( DLY5, 0.5 ) field( DOL5, "1" )	field( LNK5, "$(P)$(R)OrcaWidth_RBV.PROC CA NMS"  )
#	field( DLY6, 0.5 ) field( DOL6, "1" )	field( LNK6, "$(P)$(R)OrcaScanMode_RBV.PROC CA NMS"  )
#	field( DLY7, 0.5 ) field( DOL7, "1" )	field( LNK7, "$(P)$(R)OrcaScanSpeed_RBV.PROC CA NMS"  )
#	field( DLY8, 0.5 ) field( DOL8, "1" )	field( LNK8, "$(P)$(R)OrcaActualExposure_RBV.PROC CA NMS"  )
#	field( DLY9, 0.5 ) field( DOL9, "1" )	field( LNK9, "$(P)$(R)OrcaInfo_RBV.PROC CA NMS"  )
#	field( DLYA, 0.5 ) field( DOLA, "1" )	field( LNKA, "$(P)$(R)OrcaModel_RBV.PROC CA NMS"  )
	field( FLNK, "$(P)$(R)EdtReConfigSeq2" )
}

record( seq, "$(P)$(R)EdtReConfigSeq2" )
{
# These get processed at least once via PINI and now have rbvMonitor's so no need to reread
#	field( DLY1, 1   ) field( DOL1, "1" )	field( LNK1, "$(P)$(R)OrcaExtTrigPolarity_RBV.PROC CA NMS"  )
#	field( DLY2, 1   ) field( DOL2, "1" )	field( LNK2, "$(P)$(R)OrcaSerialNumber_RBV.PROC CA NMS"  )
#	field( DLY3, 1   ) field( DOL3, "1" )	field( LNK3, "$(P)$(R)OrcaFirmware_RBV.PROC CA NMS"  )
#	field( DLY4, 1   ) field( DOL4, "1" )	field( LNK4, "$(P)$(R)OrcaCoolingMethod_RBV.PROC CA NMS"  )
#	field( DLY5, 1   ) field( DOL5, "1" )	field( LNK5, "$(P)$(R)OrcaExtTrigDelay_RBV.PROC CA NMS"  )
#	field( DLY6, 1   ) field( DOL6, "1" )	field( LNK6, "$(P)$(R)OrcaCoolingMode_RBV.PROC CA NMS"  )
#	field( DLY7, 1   ) field( DOL7, "1" )	field( LNK7, "$(P)$(R)OrcaExtTrigMode_RBV.PROC CA NMS"  )
#	field( DLY8, 1   ) field( DOL8, "1" )	field( LNK8, "$(P)$(R)OrcaPixelCorr_RBV.PROC CA NMS"  )
#	field( FLNK, "$(P)$(R)EdtReConfigSeq3" )
}

record( stringin, "$(P)$(R)CamModel" )
{
	field( VAL,  "hamaOrcaFlash4_0" )
	field( PINI, "YES" )
}

record( stringin, "$(P)$(R)CamModelScreen" )
{
	field( VAL,  "edtPdvScreens/hamaOrcaFlash4_0.edl" )
	field( PINI, "YES" )
}

# OrcaComTest not needed now that we include serialMonitor.template
#record( stringin, "$(P)$(R)OrcaComTest" )
#{
#	field( DESC, "Communication Test" )
#	field( DTYP, "stream" )
#	field( INP,  "@hamaOrcaFlash4_0.proto ComTest $(PORT).SER" )
#	field( VAL,  "Unknown" )
#	field( PINI, "YES" )
#    field( SDIS, "$(SerialDisable)")
#}

record( stringin, "$(P)$(R)OrcaInfo_RBV" )
{
	field( DESC, "Orca Camera Info" )
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetInfo $(PORT).SER" )
	field( VAL,  "Unknown" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( archiveFields,  "VAL" )
}

record( stringin, "$(P)$(R)OrcaModel_RBV" )
{
	field( DESC, "Orca Camera Model" )
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetModel $(PORT).SER" )
	field( VAL,  "Unknown" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( archiveFields,  "VAL" )
}

record( stringin, "$(P)$(R)OrcaSerialNumber_RBV" )
{
	field( DESC, "Orca Serial Number" )
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetSerialNumber $(PORT).SER" )
	field( VAL,  "Unknown" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( archiveFields,  "VAL" )
}

record( stringin, "$(P)$(R)OrcaFirmware_RBV" )
{
	field( DESC, "Orca Firmware" )
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetFirmware $(PORT).SER" )
	field( VAL,  "Unknown" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( archiveFields,  "VAL" )
}

record( longin, "$(P)$(R)OrcaHeight_RBV" )
{
	field( DESC, "Orca CCD Height" )
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetHeight $(PORT).SER" )
	field( EGU,  "Px" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV VAL" )
}

record( longin, "$(P)$(R)OrcaWidth_RBV" )
{
	field( DESC, "Orca CCD Width" )
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetWidth $(PORT).SER" )
	field( EGU,  "Px" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV VAL" )
}

record( bi, "$(P)$(R)OrcaCoolingMethod_RBV" )
{
	field( DESC, "Orca Cooling Method" )
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetCoolingMethod $(PORT).SER" )
	field( ZNAM, "Air"  )
	field( ONAM, "Water" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "ZSV OSV" )
	info( archiveFields,  "ZSV OSV VAL" )
}

# Read ORCA Actual Exposure Time
record( ai, "$(P)$(R)OrcaActualExposure_RBV" )
{
	field( DESC, "Orca Actual Exposure" )
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetActualExposure $(PORT).SER" )
	field( EGU,  "sec" )
	field( PREC, "5" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

record( mbbo, "$(P)$(R)OrcaExtTrigMode" )
{
	field( DTYP, "stream" )
#	field( OMSL, "closed_loop" )
#	field( DOL,  "$(P)$(R)ExtTrigMode NPP NMS" )
	field( OUT,  "@hamaOrcaFlash4_0.proto SetExtTrigMode $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "Edge" )
	field( ONVL, "1" )	field( ONST, "Level" )
	field( TWVL, "2" )	field( TWST, "Sync" )
	field( FLNK, "$(P)$(R)OrcaExtTrigMode_RBV" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

# Read ORCA ExtTrigMode
record( mbbi, "$(P)$(R)OrcaExtTrigMode_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetExtTrigMode $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "Edge" )
	field( ONVL, "1" )	field( ONST, "Level" )
	field( TWVL, "2" )	field( TWST, "Sync" )
    field( SDIS, "$(SerialDisable)")
	info( archiveFields,  "VAL" )
}

record( mbbo, "$(P)$(R)OrcaExtTrigPolarity" )
{
	field( DTYP, "stream" )
	field( DOL,  "1" )
	field( OUT,  "@hamaOrcaFlash4_0.proto SetExtTrigPolarity $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "Neg" )
	field( ONVL, "1" )	field( ONST, "Pos" )
	field( FLNK, "$(P)$(R)OrcaExtTrigPolarity_RBV" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

# Read ORCA ExtTrigPolarity
record( mbbi, "$(P)$(R)OrcaExtTrigPolarity_RBV" )
{
	field( DTYP, "stream" )
	field( VAL,  "1" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetExtTrigPolarity $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "Neg" )
	field( ONVL, "1" )	field( ONST, "Pos" )
    field( SDIS, "$(SerialDisable)")
	info( archiveFields,  "VAL" )
}

record( mbbo, "$(P)$(R)OrcaScanMode" )
{
	field( DTYP, "stream" )
#	field( OMSL, "closed_loop" )
#	field( DOL,  "$(P)$(R)ScanMode NPP NMS" )
	field( OUT,  "@hamaOrcaFlash4_0.proto SetScanMode $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "Normal"  )
	field( ONVL, "1" )	field( ONST, "Binning" )
	field( TWVL, "2" )	field( TWST, "VertDbl" )
	field( FLNK, "$(P)$(R)OrcaScanMode_RBV" )
    field( SDIS, "$(SerialDisable)")
#	field( PINI, "YES" )
# Taking out of autosave for now.
# ScanMode gets set by the cfg file, so we may want
# to remove this PV so user's can't change it directly.
# Letting autosave step on it is probably also a bad idea.
#	info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

# Read ORCA ScanMode
record( mbbi, "$(P)$(R)OrcaScanMode_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetScanMode $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "Normal"  )
	field( ONVL, "1" )	field( ONST, "Binning" )
	field( TWVL, "2" )	field( TWST, "VertDbl" )
    field( SDIS, "$(SerialDisable)")
	info( archiveFields,  "VAL" )
}

record( mbbo, "$(P)$(R)OrcaScanSpeed" )
{
	field( DTYP, "stream" )
	field( OUT,  "@hamaOrcaFlash4_0.proto SetScanSpeed $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "High"  )
	field( ONVL, "1" )	field( ONST, "Slow" )
	field( FLNK, "$(P)$(R)OrcaScanSpeed_RBV" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
# Taking out of autosave for now.
# ScanSpeed gets set by the cfg file, so we may want
# to remove this PV so user's can't change it directly.
# Letting autosave step on it is probably also a bad idea.
#	info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

# Read ORCA ScanSpeed
record( mbbi, "$(P)$(R)OrcaScanSpeed_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetScanSpeed $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "High"  )
	field( ONVL, "1" )	field( ONST, "Slow" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( archiveFields,  "VAL" )
}

# Set Orca Ext Trigger Delay
record( ao, "$(P)$(R)OrcaExtTrigDelay" )
{
	field( DTYP, "stream" )
	field( OUT,  "@hamaOrcaFlash4_0.proto SetExtTrigDelay $(PORT).SER" )
	field( EGU,  "sec" )
	field( LOPR, "0" )
	field( HOPR, "10" )
	field( PREC, "5" )
	field( FLNK, "$(P)$(R)OrcaExtTrigDelay_RBV" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}
# Read ORCA External Trigger Delay
record( ai, "$(P)$(R)OrcaExtTrigDelay_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetExtTrigDelay $(PORT).SER" )
	field( EGU,  "sec" )
	field( PREC, "5" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

# Disable these records from ADBase.template as the Orca doesn't support them
record( ao, "$(P)$(R)Gain"        ) { field( DISA, "1" ) }
record( ai, "$(P)$(R)Gain_RBV"    ) { field( DISA, "1" ) }

# SizeY is derived from (MaxSizeY_RBV - MinY)
record( longout, "$(P)$(R)SizeY"  ) { field( DISA, "1" ) }

# Limit SizeX to 2048 
record(longout, "$(P)$(R)SizeX")
{
   field( VAL,  2048 )
   field( HOPR, 2048 )
   field( HIGH, 2049 )
   field( HSV,  "MINOR" )
}

# Set ORCA AcquireTime (Exposure Time)
# Note: It would be simpler if this PV could replace the
# PV $(P)$(R)AcquireTime from ADCore's ADBase.template
# However, when I tried that, the system would hang in the dbior() call.
# It could be because this PV uses a different asyn PORT than the
# one it wants to replace.
# TODO: See if there's a way to handle this in asyn
#
# For now, I replace the FLNK in ADBase.template's AcquireTime PV
# and add an EdtAcquireTime param to the edtPdvCamera class which
# maps the EdtAcquireTime value to ADAcquireTime
record( ao, "$(P)$(R)AcquireTime" )
{
	field( FLNK, "$(P)$(R)OrcaAcquireTime" )
	field( PREC, "5" )
}
# Minimum ORCA AcquireTime is in vertical double scan mode w/ 4 lines top and bottom
# Readouts are staggered by 9.77us per horiz. pixel line, the time it takes to readout two pixels,
# one from the top and one from the bottom.
# So 38.96us is 9.77us per line * 4 lines
# Stagger time for rolling shutter readout of 1024 lines top and bottom is 9.9ms
record( ao, "$(P)$(R)OrcaAcquireTime" )
{
	field( DTYP, "stream" )
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)AcquireTime NPP NMS"  )
	field( OUT,  "@hamaOrcaFlash4_0.proto SetAcquireTime $(PORT).SER" )
	field( EGU,  "sec" )
	field( LOPR, "0.00003896" )
	field( HOPR, "10" )
	field( PREC, "5" )
	field( FLNK, "$(P)$(R)OrcaAcquireTime_RBV" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}
# Readback ORCA AcquireTime (Exposure Time)
# This record handles the serial protocol
record( ai, "$(P)$(R)OrcaAcquireTime_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetAcquireTime $(PORT).SER" )
	field( EGU,  "sec" )
	field( PREC, "5" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)EdtAcquireTime_RBV" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}
# Make EdtAcquireTime_RBV follow OrcaAcquireTime_RBV
# This record updates the EDT asyn serial driver
# which maps it to ADCore's ADAcquireTime parameter
record( ao, "$(P)$(R)EdtAcquireTime_RBV" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)OrcaAcquireTime_RBV NPP MS" )
	field( PREC, "5" )
}

#
# Set ORCA TriggerMode
#

# Make EdtTriggerMode FLNK to OrcaTriggerMode
record( mbbi, "$(P)$(R)EdtTriggerMode" )
{
	field( FLNK, "$(P)$(R)OrcaTriggerMode" )
}
# Send Orca serial trigger mode command
record( mbbo, "$(P)$(R)OrcaTriggerMode" )
{
#	field( TPRO, 2 )
	field( DTYP, "stream" )
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)EdtTriggerMode PP NMS" )
	field( OUT,  "@hamaOrcaFlash4_0.proto SetTriggerMode $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "FreeRun" )
	field( ONVL, "1" )	field( ONST, "External" )
	field( TWVL, "2" )	field( TWST, "Pulse" )
	field( FLNK, "$(P)$(R)OrcaTriggerMode_RBV" )
    field( SDIS, "$(SerialDisable)")
	info( archiveFields,  "VAL" )
}

# Read Orca serial trigger mode command
record( mbbi, "$(P)$(R)OrcaTriggerMode_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetTriggerMode $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "FreeRun" )
	field( ONVL, "1" )	field( ONST, "External" )
	field( TWVL, "2" )	field( TWST, "Pulse" )
	field( FLNK, "$(P)$(R)EdtTriggerMode_RBV" )
    field( SDIS, "$(SerialDisable)")
	info( archiveFields,  "VAL" )
}
# Make EdtTriggerMode_RBV get it's value from OrcaTriggerMode_RBV
record( mbbo, "$(P)$(R)EdtTriggerMode_RBV" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)OrcaTriggerMode_RBV NPP MS" )
}

#
# Handle ORCA ROI (Vertical Double Scan Parameters)
#

# Orca supports Vertical ROI in the camera
record( longout, "$(P)$(R)EdtHwVROI_RBV" )
{
	field( VAL,  "1" )
}

# Redirect FLNK of EdtMinY to OrcaScanTop
record( longin, "$(P)$(R)EdtMinY" )
{
	field( FLNK, "$(P)$(R)OrcaScanTop" )
}
record( calc, "$(P)$(R)OrcaScanTop" )
{
	field( INPA, "$(P)$(R)EdtMinY NPP NMS" )
	field( CALC, "A&~3" )
	field( LOPR, "0" )
	field( HOPR, "1020" )
	field( FLNK, "$(P)$(R)OrcaScanCalc" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV VAL" )
}
record( longout, "$(P)$(R)OrcaScanBot" )
{
	field( DOL, "0" )
	field( LOPR, "0" )
	field( HOPR, "1020" )
	field( HIGH, "4" )
	field( HSV,  "MINOR" )
	field( PINI, "YES" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV VAL" )
}
record( calcout, "$(P)$(R)OrcaScanCalc" )
{
	field( INPA, "$(P)$(R)OrcaScanTop NPP MS" )
	field( INPB, "1024" )
	field( CALC, "B-A" )
	field( OUT,	 "$(P)$(R)OrcaScanSize PP MS" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV VAL" )
}
record( longout, "$(P)$(R)OrcaScanSize" )
{
	field( DOL,  "1024" )
	field( DTYP, "stream" )
	field( LOPR, "4" )
	field( HOPR, "1024" )
	field( OUT,  "@hamaOrcaFlash4_0.proto SetVertDblScan($(P)$(R)) $(PORT).SER" )
	field( FLNK, "$(P)$(R)OrcaScanSize_RBV" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV VAL" )
}

# Read ORCA ROI (Vertical Double Scan Parameters)
record( longin, "$(P)$(R)OrcaScanBot_RBV" )
{
	field( VAL,  "0" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV VAL" )
}
record( longin, "$(P)$(R)OrcaScanTop_RBV" )
{
	field( VAL, "0" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV VAL" )
}
record( longin, "$(P)$(R)OrcaScanSize_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetVertDblScan($(P)$(R)) $(PORT).SER" )
	field( FLNK, "$(P)$(R)OrcaScan_RBV_Calc" )
#	field( OUT,  "$(P)$(R)EdtMinY_RBV PP MS" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV VAL" )
}
record( calcout, "$(P)$(R)OrcaScan_RBV_Calc" )
{
	field( INPA, "$(P)$(R)OrcaScanSize_RBV NPP MS" )
	field( CALC, "A*2" )
	field( FLNK, "$(P)$(R)OrcaRollingShutterRamp" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV VAL" )
}

# Redefine source for EdtMinY_RBV and EdtSizeY_RBV
record( longout, "$(P)$(R)EdtMinY_RBV" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)OrcaScanTop_RBV CPP MS" )
}
record( longout, "$(P)$(R)EdtSizeY_RBV" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)OrcaScan_RBV_Calc CPP MS" )
}

# Redefine default trigger event code and rep rate pvs to
# allow for separate BEAM_EC and BEAM_RATE_RBV macro substitutions

# Orca camera should always be triggered with this camera event code
record( longout, "$(P)$(R)CamEventCode" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "40" )
}
# But image acuisition is filtered with this beam event code
# so we enable it by setting DISA to 0
record( longout, "$(P)$(R)BeamEventCode" )
{
	field( VAL,  "140" )
	field( PINI, "YES" )
	field( DISA, "0" )
	field( OUT,  "$(BEAM_EC) CPP NMS" )
}
record( longin, "$(P)$(R)BeamEventCode_RBV" )
{
	field( INP,  "$(BEAM_EC_RBV=$(P)$(R)CamEventCode_RBV) CPP MS" )
}
record( ai, "$(P)$(R)EdtBeamRepRate_RBV" )
{
	field( INP,  "$(BEAM_RATE_RBV=$(P)$(R)CamRepRate_RBV) CPP MS" )
}

record( ao, "$(P)$(R)OrcaLineDelay" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "19.48872e-6" )
	field( PREC, "3" )
	field( EGU,  "sec" )
	field( PINI, "YES" )
	info( autosaveFields, "PREC" )
}

record( calcout, "$(P)$(R)OrcaRollingShutterRamp" )
{
	field( INPA, "$(P)$(R)OrcaScanSize_RBV CPP MS" )
	field( INPB, "$(P)$(R)OrcaLineDelay    CPP MS" )
	field( CALC, "(A+1)*B" )
	field( PREC, "3" )
	field( EGU,  "sec" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
	field( FLNK,  "$(P)$(R)OrcaMinExposure" )
}

record( ao, "$(P)$(R)OrcaMinExposure" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)OrcaRollingShutterRamp NPP MS" )
	field( PREC, "3" )
	field( EGU,  "sec" )
	field( FLNK, "$(P)$(R)OrcaScanMode_RBV" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

record( calcout, "$(P)$(R)OrcaMaxRate" )
{
	field( INPA, "$(P)$(R)OrcaScanSize_RBV    CPP MS" )
	field( INPB, "$(P)$(R)OrcaLineDelay       CPP MS" )
	field( INPC, "$(P)$(R)OrcaAcquireTime_RBV CPP MS" )
	field( CALC, "1/(C+(A+10)*B)" )
	field( PREC, "2" )
	field( EGU,  "Hz" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

record( calc, "$(P)$(R)OrcaFullExpWindow" )
{
	field( INPA, "$(P)$(R)AcquireTime_RBV CPP MS" )
	field( INPB, "$(P)$(R)OrcaRollingShutterRamp CPP MS" )
	field( CALC, "A-B" )
	field( PREC, "3" )
	field( EGU,  "sec" )
	field( LOLO, "0" )
	field( LOW,  "100e-6" )
	field( LLSV, "MAJOR" )
	field( LSV,  "MINOR" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC VAL" )
}

record( calc, "$(P)$(R)OrcaPrepTime" )
{
	field( INPA, "$(P)$(R)CamRepDur              CPP MS" )
	field( INPB, "$(P)$(R)OrcaRollingShutterRamp CPP MS" )
	field( INPC, "$(P)$(R)AcquireTime_RBV        CPP MS" )
	field( CALC, "A-B-C" )
	field( PREC, "3" )
	field( EGU,  "sec" )
	field( LOLO, "158e-6" )
	field( LOW,  "180e-6" )
	field( LLSV, "MAJOR" )
	field( LSV,  "MINOR" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC VAL" )
}

# Read ORCA CoolingMode
record( mbbi, "$(P)$(R)OrcaCoolingMode_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetCoolingMode $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "On"  )
	field( ONVL, "1" )	field( ONST, "Max" )
	field( TWVL, "2" )	field( TWST, "Off" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "ZRSV ONSV TWSV" )
	info( archiveFields,  "VAL" )
}

record( mbbo, "$(P)$(R)OrcaCoolingMode" )
{
	field( DTYP, "stream" )
	field( OUT,  "@hamaOrcaFlash4_0.proto SetCoolingMode $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "On"  )
	field( ONVL, "1" )	field( ONST, "Max" )
	field( TWVL, "2" )	field( TWST, "Off" )
	field( FLNK, "$(P)$(R)OrcaCoolingMode_RBV" )
    field( SDIS, "$(SerialDisable)")
#	field( PINI, "YES" )
# Taking out of autosave for now.
# Not safe to save this PV value
#	info( autosaveFields, "VAL" )
	info( autosaveFields, "ZRSV ONSV TWSV" )
	info( archiveFields,  "ZRSV ONSV TWSV VAL" )
}

record( bo, "$(P)$(R)OrcaPixelCorr" )
{
	field( DTYP, "stream" )
	field( OUT,  "@hamaOrcaFlash4_0.proto SetPixelCorr $(PORT).SER" )
	field( ZNAM, "Off"  )
	field( ONAM, "On" )
	field( FLNK, "$(P)$(R)OrcaPixelCorr_RBV" )
    field( SDIS, "$(SerialDisable)")
#	field( PINI, "YES" )
	info( autosaveFields, "ZSV OSV VAL" )
	info( archiveFields,  "ZSV OSV VAL" )
}

# Read ORCA PixelCorr
record( bi, "$(P)$(R)OrcaPixelCorr_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetPixelCorr $(PORT).SER" )
	field( ZNAM, "Off"  )
	field( ONAM, "On" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "ZSV OSV" )
	info( archiveFields,  "ZSV OSV VAL" )
}

record( ao, "$(P)$(R)CamProcDelay" )
{
    field( DOL,  "160e-6" )
    field( EGU,  "Sec" )
    field( PREC, "3" ) 
    field( PINI, "YES" )
    info( autosaveFields, "VAL" )
}

record( calc, "$(P)$(R)XmitDelay" )
{
	field( INPA, "$(P)$(R)OrcaMinExposure CP MS" )
    field( INPB, "" )
    field( INPC, "" )
    field( INPD, "" )
    field( INPE, "$(P)$(R)CamProcDelay CPP MS" )
    field( CALC, "A+E" )
    field( EGU,  "Sec" )
}

# TrigToTS_Calc: Expected delay from trigger to timeStamp update 
# We subtract 8.33ms as we trigger the Orca from the prior 120hz eventCode
record( calc, "$(P)$(R)TrigToTS_Calc" )
{
	field( INPA, "$(P)$(R)AcquireTime_RBV CP MS" )
	field( INPB, "$(P)$(R)XmitDelay CP MS" )
	field( INPC, "$(P)$(R)DriverProcDelay CP MS" )
	field( INPD, "8.33e-3" )
	field( CALC, "A+B+C-D" )
	field( EGU,  "sec" )
	field( PREC, "5" ) 
}


record( ao, "$(P)$(R)XmitRate" )
{
    field( DOL,  "1.051e8" )
    field( EGU,  "Px/Sec" )
    field( PREC, "3" )
    field( PINI, "YES" )
    info( autosaveFields, "VAL" )
}

# Monitor and reprocess these records automatically when they're undefined
# Macros:
#	SER_OK_PV:	PV used to verify serial link, blocks reprocess when UDF 
#	MON_PV:		PV to monitor
#	MON_SCAN:	PV used to verify serial link

# Include a serialMonitor.template monitor
# This should be the first PV you process in the EdtReConfigSeq
substitute "MON_SCAN=10 second"
substitute "SER_OK_PV=$(P)$(R)OrcaAcquireTime_RBV
include "serialMonitor.template"

# 1 second RBV monitors
substitute "MON_SCAN=1 second"
substitute "MON_PV=$(P)$(R)OrcaTriggerMode_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaScanSize_RBV"
include "rbvMonitor.template"

# 10 second RBV monitors
substitute "MON_SCAN=10 second"
substitute "MON_PV=$(P)$(R)OrcaHeight_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaWidth_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaInfo_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaModel_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaSerialNumber_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaFirmware_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaCoolingMethod_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaCoolingMode_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaActualExposure_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaExtTrigMode_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaExtTrigPolarity_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaScanMode_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaScanSpeed_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaExtTrigDelay_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaPixelCorr_RBV"
include "rbvMonitor.template"

# 1 second put monitors
substitute "MON_SCAN=1 second"
substitute "MON_PV=$(P)$(R)OrcaAcquireTime"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaTriggerMode"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaScanSize"
include "putMonitor.template"

# 10 second put monitors
substitute "MON_SCAN=10 second"
substitute "MON_PV=$(P)$(R)OrcaScanMode"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaScanSpeed"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaExtTrigMode"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaExtTrigDelay"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)OrcaExtTrigPolarity"
include "putMonitor.template"
