#
# EPICS database for
# Pulnix 6740 Camera in 10 bit mode
#
# Protocol root must match db filename root
# i.e. ptm6740_10.proto

record( stringin, "$(P)$(R)CamModel" )
{
	field( VAL,  "ptm6740_10" )
	field( PINI, "YES" )
}

record( stringin, "$(P)$(R)CamModelScreen" )
{
	field( VAL,  "edtPdvScreens/ptm6740_10.edl" )
	field( PINI, "YES" )
}


# Redirect FLNK's from Gain to EdtGain to PulnixGain
# Gain and EdtGain use range 0..100
record( ao, "$(P)$(R)Gain" )
{
	field( DRVH, "100" )
	field( DRVL, "0" )
	field( HOPR, "100" )
	field( LOPR, "0" )
	field( FLNK, "$(P)$(R)EdtGain" )
	field( PINI, "YES" )
}
record( ao, "$(P)$(R)EdtGain" )
{
	field( DRVH, "100" )
	field( DRVL, "0" )
	field( HOPR, "100" )
	field( LOPR, "0" )
	field( FLNK, "$(P)$(R)PulnixGain" )
}
#
# The Pulnix camera has 2 gain controls, A & B
# with range 0x042 to 0x1E8
# For compatibility w/ ADCore's single gain control,
# calc records and an offset value are used to set A & B
record( dfanout, "$(P)$(R)PulnixGain" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)EdtGain MS" )
	field( DESC, "Set camera gain" )
	field( HOPR, "100" )
	field( LOPR, "0" )
	field( FLNK, "$(P)$(R)PulnixGainA" )
}
record( longout, "$(P)$(R)PulnixGainOffset" )
{
	field( DESC, "Offset between gain halves" )
	field( DOL,	 "0" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)PulnixGainA" )
	info( autosaveFields, "VAL" )
}
record( calcout, "$(P)$(R)PulnixGainA" )
{
	field( DESC, "Gain for side A" )
	field( INPD, "$(P)$(R)PulnixGainOffset" )
	field( INPG, "$(P)$(R)PulnixGain" )
	field( INPH, "0x1E8" )
	field( INPL, "0x042" )
	field( CALC, "(G/100)*(H-L)+L-(D/2)" )
	field( OUT,  "$(P)$(R)PulnixSetGainA PP" )
	field( FLNK, "$(P)$(R)PulnixGainB" )
}
record( calcout, "$(P)$(R)PulnixGainB" )
{
	field( DESC, "Gain for side B" )
	field( INPD, "$(P)$(R)PulnixGainOffset" )
	field( INPG, "$(P)$(R)PulnixGain" )
	field( INPH, "0x1E8" )
	field( INPL, "0x042" )
	field( CALC, "(G/100)*(H-L)+L+(D/2)" )
	field( OUT,  "$(P)$(R)PulnixSetGainB PP" )
}

record( longout, "$(P)$(R)PulnixSetGainA" )
{
	field( DESC, "Set camera gain A" )
	field( OMSL, "closed_loop" )
	field( DOL,	 "$(P)$(R)PulnixGainA NPP" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetGainA $(PORT).SER" )
	field( DRVH, "0x1E8" )
	field( DRVL, "0x042" )
	field( HOPR, "0x1E8" )
	field( LOPR, "0x042" )
    field( SDIS, "$(SerialDisable)")
}
record( longout, "$(P)$(R)PulnixSetGainB" )
{
	field( DESC, "Set camera gain B" )
	field( OMSL, "closed_loop" )
	field( DOL,	 "$(P)$(R)PulnixGainB NPP" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetGainB $(PORT).SER" )
	field( DRVH, "0x1E8" )
	field( DRVL, "0x042" )
	field( HOPR, "0x1E8" )
	field( LOPR, "0x042" )
    field( SDIS, "$(SerialDisable)")
}

record( longout, $(P)$(R)EdtReConfigCount )
{
}

# Reference voltage commands
record( longout, "$(P)$(R)PulnixRefVoltA" )
{
	field( DESC, "Set ref voltage for ch A" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetRefVoltA $(PORT).SER" )
	field( DRVL, "0x000" )
	field( DRVH, "0x1FF" )
	field( LOPR, "0x000" )
	field( HOPR, "0x1FF" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "VAL" )
}
record( longin, "$(P)$(R)PulnixRefVoltA_RBV" )
{
	field( DESC, "Get ref voltage for ch A" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm6740_10.proto GetRefVoltA $(PORT).SER" )
	field( LOPR, "0x000" )
	field( HOPR, "0x1FF" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
}


record( longout, "$(P)$(R)PulnixRefVoltB" )
{
	field( DESC, "Set ref voltage for ch B" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetRefVoltB $(PORT).SER" )
	field( DRVL, "0x000" )
	field( DRVH, "0x1FF" )
	field( LOPR, "0x000" )
	field( HOPR, "0x1FF" )
	field( PINI, "YES" )
    field( SDIS, "$(SerialDisable)")
	info( autosaveFields, "VAL" )
}
record( longin, "$(P)$(R)PulnixRefVoltB_RBV" )
{
	field( DESC, "Get ref voltage for ch B" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm6740_10.proto GetRefVoltB $(PORT).SER" )
    field( SDIS, "$(SerialDisable)")
	field( LOPR, "0x000" )
	field( HOPR, "0x1FF" )
	field( PINI, "YES" )
}

record( ao, "$(P)$(R)AcquireTime" )
{
	field( FLNK, "$(P)$(R)EdtAcquireTime" )
	field( PREC, "5" )
}
record( ao, "$(P)$(R)EdtAcquireTime" )
{
	field( FLNK, "$(P)$(R)PulnixFreeRunAcquireTime" )
}

# PulnixFreeRunAcquireTime
# Map AcquireTime in sec to Pulnix manual shutter values
# Pulnix ManualShutter Values
#	0	-	Manual No Shutter
#	1-8	-	1=1/250, 2=1/500, 3=1/1000, 4=1/2000, 5=1/4000, 6=1/8000, 7=1/16000, 8=1/32000, 9=1/64000
# Internal shutter speeds are powers of 2 relative to 1/250, so
# A = 1/(250*2**(X-1)
# 2**(X-1) = (0.004/A)
# (X-1) = LN(0.004/A)/LN(2)
# X = LN(0.004/A)/LN(2) + 1
record( calc, "$(P)$(R)PulnixFreeRunAcquireTime" )
{
	field( INPA,  "$(P)$(R)AcquireTime NPP NMS"  )
	field( CALC,  "MAX(0,MIN(9,LN(0.004/A)/LN(2)+1))" )
	field( PREC, "0" )
	field( FLNK, "$(P)$(R)PulnixExtTrigAcquireTime" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}
# PulnixExtTrigAcquireTime
# Map AcquireTime in sec to Pulnix internal shutter values
# Pulnix InternalShutter X: 1=1/64000, 2=1/32000, 3=1/16000, 4=1/8000, 5=1/4000, 6=1/2000, 7=1/1000,8=1/500
# Internal shutter speeds are powers of 2 relative to 1/500, so
# A = 1/(500*2**(8-X)
# 2**(8-X) = (0.002/A)
# (8-X) = LN(0.002/A)/LN(2)
# X = 8 - LN(0.002/A)/LN(2)
record( calcout, "$(P)$(R)PulnixExtTrigAcquireTime" )
{
	field( INPA,  "$(P)$(R)AcquireTime NPP NMS"  )
	field( CALC,  "MAX(1,MIN(8,8-LN(.002/A)/LN(2)))" )
	field( PREC, "0" )
	field( FLNK, "$(P)$(R)PulnixPulseAcquireTime" )
#	field( FLNK, "$(P)$(R)PulnixShutterReadSelect" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

# PulnixPulseAcquireTime
# For pulse width, we use Async setting 9 and
# write the AcquireTime to the trigger pulse width
record( calcout, "$(P)$(R)PulnixPulseAcquireTime" )
{
	field( INPA, "$(P)$(R)AcquireTime NPP NMS"  )
	field( INPB, "$(PW_SCALE=1e9)"  )
	field( DOPT, "Use OCAL" )
	field( OOPT, "On Change" )
	field( OCAL, "A*B" )
	field( OUT,  "$(PWIDTH=) CA NMS" )
	field( CALC, "9" )
	field( PREC, "0" )
	field( FLNK, "$(P)$(R)PulnixShutterCmdSelect" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

record( longin, "$(P)$(R)PulnixGetRawShutter" )
{
	field( DESC, "Raw Numeric shutter value" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm6740_10.proto GetShutter $(PORT).SER " )
    field( SDIS, "$(SerialDisable)")
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)PulnixGetRawTriggerMode" )
}

record( calc, "$(P)$(R)PulnixShutterReadSelect" )
{
	field( CALC, "A+1" )
	field( INPA, "$(P)$(R)PulnixTriggerMode" )
	field( FLNK, "$(P)$(R)PulnixShutterReadFanout" )
}

record( dfanout, "$(P)$(R)PulnixShutterReadFanout" )
{
	field( DESC, "Selects shutter read cmd" )
	field( OMSL, "closed_loop" )
#	field( DOL,	 "$(P)$(R)PulnixShutter" )
	field( DOL,	 "1" )
	field( SELL, "$(P)$(R)PulnixShutterReadSelect" )
	field( SELM, "Specified" )
	field( OUTA, "$(P)$(R)PulnixCalcFreeRunShutter.PROC PP" )
	field( OUTB, "$(P)$(R)PulnixCalcExtTrigShutter.PROC PP" )
	field( OUTC, "$(P)$(R)PulnixPulseAcquireTime_RBV.PROC PP" )
	field( PINI, "YES" )
}

# PulnixCalcFreeRunShutter
# Map Pulnix manual shutter values to AcquireTime in sec
# Pulnix ManualShutter Values
#	0	-	Manual No Shutter
#	1-8	-	1=1/250, 2=2/500, 3=1/1000, 4=1/2000, 5=1/4000, 6=1/8000, 7=1/16000, 8=1/32000, 9=1/64000
# Internal shutter speeds are powers of 2 relative to 1/250, so
# X = 1/(250*2**(A-1)
record( calcout, "$(P)$(R)PulnixCalcFreeRunShutter" )
{
	field( INPA,  "$(P)$(R)PulnixGetRawShutter NPP NMS" )
	field( CALC,  "1/(250*2**(A-1))" )
	field( PREC, "5" )
	field( OOPT, "On Change" )
	field( OUT,  "$(P)$(R)EdtAcquireTime_RBV PP MS" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}
# PulnixCalcExtTrigShutter
# Map AcquireTime in sec to Pulnix internal shutter values
# Pulnix InternalShutter X: 1=1/64000, 2=1/32000, 3=1/16000, 4=1/8000, 5=1/4000, 6=1/2000, 7=1/1000,8=1/500
# Internal shutter speeds are powers of 2 relative to 1/500, so
# X = 1/(500*2**(8-A)
record( calcout, "$(P)$(R)PulnixCalcExtTrigShutter" )
{
	field( INPA, "$(P)$(R)PulnixGetRawShutter NPP NMS" )
	field( CALC, "1/(500*2**(8-A))" )
	field( PREC, "5" )
	field( OOPT, "On Change" )
	field( OUT,  "$(P)$(R)EdtAcquireTime_RBV PP MS" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}
# PulnixPulseAcquireTime_RBV
# For pulse width, we use Async setting 9 and
# write the AcquireTime to the trigger pulse width
record( calcout, "$(P)$(R)PulnixPulseAcquireTime_RBV" )
{
	field( INPA, "$(PW_RBV) NPP NMS" )
	field( INPB, "$(PW_SCALE=1e9)"  )
	field( CALC, "A/B" )
	field( EGU,  "ns" )
	field( PREC, "5" )
	field( OOPT, "On Change" )
	field( OUT,  "$(P)$(R)EdtAcquireTime_RBV PP MS" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

# Make EdtTriggerMode FLNK to PulnixTriggerMode
record( mbbi, "$(P)$(R)EdtTriggerMode" )
{
	field( FLNK, "$(P)$(R)PulnixTriggerMode" )
}
record( mbbo, "$(P)$(R)PulnixTriggerMode" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)EdtTriggerMode NPP NMS" )
	field( ZRVL, "0" )	field( ZRST, "FreeRun" )
	field( ONVL, "1" )	field( ONST, "External" )
	field( TWVL, "2" )	field( TWST, "Pulse" )
	field( FLNK, "$(P)$(R)PulnixShutterCmdSelect" )
}

# Sends :SHR?
# Recvs o<mode>S<num>
# where mode is:
#	A - Async  shutter mode
#	D - Direct shutter mode
#	M - Manual shutter mode
# and num is an integer whose meaning varies w/ the shutter mode
record( longin, "$(P)$(R)PulnixGetRawTriggerMode" )
{
	field( DESC, "Raw shutter trigger mode" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm6740_10.proto GetTriggerMode $(PORT).SER " )
    field( SDIS, "$(SerialDisable)")
# I/O Intr not working in current streamDevice version
#	field( SCAN, "I/O Intr" )
#	field( TPRO, "2" )
	field( FLNK, "$(P)$(R)PulnixCalcTriggerMode" )
}

record( calcout, "$(P)$(R)PulnixCalcTriggerMode" )
{
	field( INPA,  "$(P)$(R)PulnixGetRawTriggerMode NPP NMS"  )
	field( INPB,  "$(P)$(R)PulnixGetRawShutter NPP NMS"  )
	field( CALC,  "A==0?0:(A==1?(B!=9?1:2):3)" )
	field( PREC, "0" )
	field( OUT,  "$(P)$(R)PulnixTriggerMode_RBV PP MS" )
	field( FLNK, "$(P)$(R)PulnixShutterReadSelect" )
}
record( mbbi, "$(P)$(R)PulnixTriggerMode_RBV" )
{
	field( ZRVL, "0" )	field( ZRST, "FreeRun" )
	field( ONVL, "1" )	field( ONST, "External" )
	field( TWVL, "2" )	field( TWST, "Pulse" )
	field( THVL, "3" )	field( THST, "Direct" )
	field( FLNK, "$(P)$(R)EdtTriggerMode_RBV" )
}
# Make EdtTriggerMode_RBV get it's value from PulnixTriggerMode_RBV
record( mbbo, "$(P)$(R)EdtTriggerMode_RBV" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)PulnixTriggerMode_RBV NPP MS" )
}

record( calc, "$(P)$(R)PulnixShutterCmdSelect" )
{
	field( CALC, "A+1" )
	field( INPA, "$(P)$(R)PulnixTriggerMode NPP NMS" )
	field( FLNK, "$(P)$(R)PulnixShutterCmdFanout" )
}

record( dfanout, "$(P)$(R)PulnixShutterCmdFanout" )
{
	field( DESC, "Selects shutter cmd" )
	field( OMSL, "closed_loop" )
	field( SELL, "$(P)$(R)PulnixShutterCmdSelect" )
	field( SELM, "Specified" )
	field( DOL,  "1" )
	field( OUTA, "$(P)$(R)PulnixSetFreeRunShutter.PROC PP" )
	field( OUTB, "$(P)$(R)PulnixSetExtTrigShutter.PROC PP" )
	field( OUTC, "$(P)$(R)PulnixSetPulseShutter.PROC PP" )
	field( FLNK, "$(P)$(R)PulnixGetRawShutter" )
}

record( longout, "$(P)$(R)PulnixSetExtTrigShutter" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)PulnixExtTrigAcquireTime NPP NMS" )
	field( DESC, "Select Async shutter speeds" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetAsyncShutter $(PORT).SER " )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)PulnixGetRawShutter PP" )
}

record( longout, "$(P)$(R)PulnixSetDirectShutter" )
{
	field( DESC, "Direct shutter setting" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetDirectShutter $(PORT).SER " )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)PulnixGetRawShutter PP" )
}

record( longout, "$(P)$(R)PulnixSetPulseShutter" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)PulnixPulseAcquireTime NPP NMS" )
	field( DESC, "Select Async pulse width shutter" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetAsyncShutter $(PORT).SER " )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)PulnixSetTrigPulseWidth" )
}
record( calcout, "$(P)$(R)PulnixSetTrigPulseWidth" )
{
	field( INPA, "$(P)$(R)AcquireTime NPP NMS"  )
	field( INPB, "$(PW_SCALE=1e9)"  )
	field( CALC, "A*B" )
	field( PREC, "0" )
	field( OUT,  "$(PWIDTH=) CA NMS" )
	field( FLNK, "$(P)$(R)PulnixGetRawShutter" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

record( longout, "$(P)$(R)PulnixSetFreeRunShutter" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)PulnixFreeRunAcquireTime NPP NMS" )
	field( DESC, "Select FreeRun shutter speeds" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetManualShutter $(PORT).SER " )
    field( SDIS, "$(SerialDisable)")
	field( FLNK, "$(P)$(R)PulnixGetRawShutter PP" )
}

#record( mbbi, "$(P)$(R)PulnixShutter" )
#{
#	field( DESC, "Camera shutter speed" )
#	field( ZRVL, "0"	) field( ZRST, "1/250"	)
#	field( ONVL, "1"	) field( ONST, "1/500"	)
#	field( TWVL, "2"	) field( TWST, "1/1000"	)
#	field( THVL, "3"	) field( THST, "1/2000"	)
#	field( FRVL, "4"	) field( FRST, "1/4000"	 )
#	field( FVVL, "5"	) field( FVST, "1/8000"	 )
#	field( SXVL, "6"	) field( SXST, "1/16000" )
#	field( SVVL, "7"	) field( SVST, "1/32000" )
#	field( EIVL, "8"	) field( EIST, "1/64000" )
#	field( NIVL, "9"	) field( NIST, "Pulse"	 )
#	field( FLNK, "$(P)$(R)PulnixTriggerModeFanout PP" )
#	field( PINI, "YES" )
#}

record( bo, "$(P)$(R)PulnixAutoGain" )
{
	field( DESC, "Auto Gain Balance" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetAutoGain $(PORT).SER" )
    field( SDIS, "$(SerialDisable)")
	field( ZNAM, "Disabled" )
	field( ONAM, "Enabled" )
	field( PINI, "YES" )
	info( autosaveFields, "VAL" )
}

record( stringin, "$(P)$(R)PulnixModelID_RBV" )
{
	field( DESC, "Camera reported model" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm6740_10.proto GetModel $(PORT).SER" )
    field( SDIS, "$(SerialDisable)")
	field( PINI, "YES" )
}

record( stringin, "$(P)$(R)PulnixFirmware_RBV" )
{
	field( DESC, "Camera reported vers" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm6740_10.proto GetVers $(PORT).SER" )
    field( SDIS, "$(SerialDisable)")
	field( PINI, "YES" )
}

# Pulnix 6740 has 9 lines of delay before it writes the first
# pixels to their camlink channels.
# One line is 400 pixel clocks at 40MHz = 10us
# No need to autosave as it's fixed
record( ao, "$(P)$(R)CamProcDelay" )
{
    field( DOL,  "10e-6" )
    field( LOW,  "9.999e-6" )
    field( HIGH, "10.001-6" )
    field( LSV,  "MINOR" )
    field( HSV,  "MINOR" )
    info( autosaveFields, "" )
}

# Pulnix TM-6740 timing
# 400 pixel clocks per line
# 20 lines between images
# We only support scan mode A, so all pixels get sent,
# but EDT returns an image after MinY + SizeY lines
record( calc, "$(P)$(R)XmitDelay" )
{
    field( INPA, "$(P)$(R)MinY_RBV CPP MS" )
    field( INPB, "$(P)$(R)XmitRate CPP MS" )
    field( INPC, "$(P)$(R)SizeY_RBV CPP MS" )
    field( INPD, "" )
    field( INPE, "$(P)$(R)CamProcDelay CPP MS" )
    field( INPF, "" )
    field( CALC, "(400*(20+A+C)/B)+E" )
    field( EGU,  "Sec" )
}

# Effective transmit rate is 40Mhz PixelClock * 2 HTaps
record( ao, "$(P)$(R)XmitRate" )
{
    field( DOL,  "40.0e6" )
    field( EGU,  "Px/Sec" )
    field( PREC, "3" )
    field( PINI, "YES" )
    info( autosaveFields, "VAL" )
}   


# Possible TODO: Add support for
#	WB,WB?	Set and read white balance, Color cameras only
#	OFS,OFS? Set and read black offset, Color cameras only
#	USIx;y and USI?x	Set and read user defined integers
#	USSx;y and USS?x	Set and read user defined strings
#	RQ		Initiate soft request readout
#	ROIx;y;w;h		Set ROI x offset, y offset, width, and height

# Monitor and reprocess these records automatically when they're undefined
# Macros:
#	SER_OK_PV:	PV used to verify serial link, blocks reprocess when UDF 
#	MON_PV:		PV to monitor
#	MON_SCAN:	PV used to verify serial link

# Include a serialMonitor.template monitor
# This should be the first PV you process in the EdtReConfigSeq
substitute "MON_SCAN=10 second"
substitute "SER_OK_PV=$(P)$(R)PulnixGetRawShutter"
include "serialMonitor.template"

# 1 second RBV monitors
substitute "MON_SCAN=1 second"
substitute "MON_PV=$(P)$(R)PulnixGetRawTriggerMode"
include "rbvMonitor.template"

# 10 second RBV monitors
substitute "MON_SCAN=10 second"
substitute "MON_PV=$(P)$(R)PulnixRefVoltA_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)PulnixRefVoltB_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)PulnixModelID_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)PulnixFirmware_RBV"
include "rbvMonitor.template"

# 1 second PUT monitors
substitute "MON_SCAN=1 second"
substitute "MON_PV= $(P)$(R)PulnixSetExtTrigShutter"
include "putMonitor.template"
#substitute "MON_PV= $(P)$(R)PulnixSetPulseShutter"
#include "putMonitor.template"
#substitute "MON_PV= $(P)$(R)PulnixSetFreeRunShutter"
#include "putMonitor.template"
substitute "MON_PV= $(P)$(R)PulnixSetGainA"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)PulnixSetGainB"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)PulnixRefVoltA"
include "putMonitor.template"
substitute "MON_PV= $(P)$(R)PulnixRefVoltB"
include "putMonitor.template"

# 10 second PUT monitors
substitute "MON_SCAN=10 second"
substitute "MON_PV= $(P)$(R)PulnixAutoGain"
include "putMonitor.template"
